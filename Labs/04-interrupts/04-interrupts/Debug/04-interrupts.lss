
04-interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b32  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f4  00000000  00000000  00000efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c5  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000403  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  a8:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  aa:	90 81       	ld	r25, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_write_low+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_write_low+0xa>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	20 83       	st	Z, r18
  c0:	08 95       	ret

000000c2 <GPIO_write_high>:
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)

{
    *reg_name = *reg_name |(1<<pin_num);
  c2:	fc 01       	movw	r30, r24
  c4:	40 81       	ld	r20, Z
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <GPIO_write_high+0xe>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <GPIO_write_high+0xa>
  d4:	24 2b       	or	r18, r20
  d6:	20 83       	st	Z, r18
  d8:	08 95       	ret

000000da <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	84 e2       	ldi	r24, 0x24	; 36
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D1);
  e4:	65 e0       	ldi	r22, 0x05	; 5
  e6:	85 e2       	ldi	r24, 0x25	; 37
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>

    GPIO_config_output(&DDRB, LED_D2);
  ee:	64 e0       	ldi	r22, 0x04	; 4
  f0:	84 e2       	ldi	r24, 0x24	; 36
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D2);
  f8:	64 e0       	ldi	r22, 0x04	; 4
  fa:	85 e2       	ldi	r24, 0x25	; 37
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>

    GPIO_config_output(&DDRB, LED_D3);
 102:	63 e0       	ldi	r22, 0x03	; 3
 104:	84 e2       	ldi	r24, 0x24	; 36
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D3);
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	85 e2       	ldi	r24, 0x25	; 37
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>

    GPIO_config_output(&DDRB, LED_D4);
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	84 e2       	ldi	r24, 0x24	; 36
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D4);
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
  
    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	80 83       	st	Z, r24
 134:	80 81       	ld	r24, Z
 136:	83 60       	ori	r24, 0x03	; 3
 138:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 13a:	ef e6       	ldi	r30, 0x6F	; 111
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 144:	78 94       	sei
 146:	ff cf       	rjmp	.-2      	; 0x146 <main+0x6c>

00000148 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
    
        static uint16_t i=0;
       
        if(i==0){
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 172:	89 2b       	or	r24, r25
 174:	51 f4       	brne	.+20     	; 0x18a <__vector_13+0x42>
            GPIO_write_low(&PORTB, LED_D1);
 176:	65 e0       	ldi	r22, 0x05	; 5
 178:	85 e2       	ldi	r24, 0x25	; 37
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
            GPIO_write_high(&PORTB, LED_D2); 
 180:	64 e0       	ldi	r22, 0x04	; 4
 182:	85 e2       	ldi	r24, 0x25	; 37
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
            }
        
        if(i==1){
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 18e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	51 f4       	brne	.+20     	; 0x1aa <__vector_13+0x62>
            GPIO_write_low(&PORTB, LED_D2);
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	85 e2       	ldi	r24, 0x25	; 37
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
            GPIO_write_high(&PORTB, LED_D1);
 1a0:	65 e0       	ldi	r22, 0x05	; 5
 1a2:	85 e2       	ldi	r24, 0x25	; 37
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        }
        
        if(i==2){
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1b2:	02 97       	sbiw	r24, 0x02	; 2
 1b4:	51 f4       	brne	.+20     	; 0x1ca <__vector_13+0x82>
            GPIO_write_low(&PORTB, LED_D3);
 1b6:	63 e0       	ldi	r22, 0x03	; 3
 1b8:	85 e2       	ldi	r24, 0x25	; 37
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
            GPIO_write_high(&PORTB, LED_D2);
 1c0:	64 e0       	ldi	r22, 0x04	; 4
 1c2:	85 e2       	ldi	r24, 0x25	; 37
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        }     
        
        if(i==3){
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1d2:	03 97       	sbiw	r24, 0x03	; 3
 1d4:	51 f4       	brne	.+20     	; 0x1ea <__vector_13+0xa2>
            GPIO_write_low(&PORTB, LED_D4);
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	85 e2       	ldi	r24, 0x25	; 37
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
            GPIO_write_high(&PORTB, LED_D3);
 1e0:	63 e0       	ldi	r22, 0x03	; 3
 1e2:	85 e2       	ldi	r24, 0x25	; 37
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        }
        
        if(i==4){
 1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1f2:	04 97       	sbiw	r24, 0x04	; 4
 1f4:	51 f4       	brne	.+20     	; 0x20a <__vector_13+0xc2>
            GPIO_write_low(&PORTB, LED_D3);
 1f6:	63 e0       	ldi	r22, 0x03	; 3
 1f8:	85 e2       	ldi	r24, 0x25	; 37
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
            GPIO_write_high(&PORTB, LED_D4);
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	85 e2       	ldi	r24, 0x25	; 37
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        }
        
        if(i==5){
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 20e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 212:	05 97       	sbiw	r24, 0x05	; 5
 214:	71 f4       	brne	.+28     	; 0x232 <__vector_13+0xea>
            GPIO_write_low(&PORTB, LED_D2);
 216:	64 e0       	ldi	r22, 0x04	; 4
 218:	85 e2       	ldi	r24, 0x25	; 37
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
            GPIO_write_high(&PORTB, LED_D3);
 220:	63 e0       	ldi	r22, 0x03	; 3
 222:	85 e2       	ldi	r24, 0x25	; 37
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
            i=0;
 22a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 22e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
        }    
        
        
    i++;
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 236:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 240:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    

 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	7f 91       	pop	r23
 252:	6f 91       	pop	r22
 254:	5f 91       	pop	r21
 256:	4f 91       	pop	r20
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
