
03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e1  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000733  00000000  00000000  00000c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000387  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000da  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001c96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_write_high>:
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)

{
    *reg_name = *reg_name |(1<<pin_num);
  98:	fc 01       	movw	r30, r24
  9a:	40 81       	ld	r20, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_write_high+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_write_high+0xa>
  aa:	24 2b       	or	r18, r20
  ac:	20 83       	st	Z, r18
  ae:	08 95       	ret

000000b0 <GPIO_toggle>:
 **********************************************************************/

void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)

{
    *reg_name = *reg_name ^(1<<pin_num);
  b0:	fc 01       	movw	r30, r24
  b2:	40 81       	ld	r20, Z
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <GPIO_toggle+0xe>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <GPIO_toggle+0xa>
  c2:	24 27       	eor	r18, r20
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <main>:
#include "gpio.h"
int main(void)
{
    //input output setup
    
        GPIO_config_output(&DDRB, LED_INT);
  c8:	65 e0       	ldi	r22, 0x05	; 5
  ca:	84 e2       	ldi	r24, 0x24	; 36
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
        GPIO_write_high(&PORTB, LED_INT);
  d2:	65 e0       	ldi	r22, 0x05	; 5
  d4:	85 e2       	ldi	r24, 0x25	; 37
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_high>
    //PORTB = PORTB & ~(1<<LED_INT);
    //DDRB = DDRB | (1<<LED_INT);
    
        GPIO_config_output(&DDRC, LED_EXT);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	87 e2       	ldi	r24, 0x27	; 39
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
        GPIO_write_high(&PORTC, LED_EXT);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	88 e2       	ldi	r24, 0x28	; 40
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	84 e3       	ldi	r24, 0x34	; 52
  f4:	9c e0       	ldi	r25, 0x0C	; 12
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x2e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x38>
 100:	00 00       	nop
    while (1)
    {
        _delay_ms(SHORT_DELAY);
        //PORTB = PORTB ^ (1<<LED_INT);
        //PORTC = PORTC ^ (1<<LED_EXT);
        GPIO_toggle(&PORTB, LED_INT);
 102:	65 e0       	ldi	r22, 0x05	; 5
 104:	85 e2       	ldi	r24, 0x25	; 37
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 58 00 	call	0xb0	; 0xb0 <GPIO_toggle>
        GPIO_toggle(&PORTC, LED_EXT);
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	88 e2       	ldi	r24, 0x28	; 40
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 58 00 	call	0xb0	; 0xb0 <GPIO_toggle>
 116:	ec cf       	rjmp	.-40     	; 0xf0 <main+0x28>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
