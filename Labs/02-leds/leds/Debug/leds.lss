
leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fd  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065e  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000264  00000000  00000000  00000ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001513  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include <avr/io.h>
int main(void)
{
    //input output setup
    DDRB = DDRB | (1<<LED_INT);
  80:	25 9a       	sbi	0x04, 5	; 4
    DDRC = DDRC | (1<<LED_EXT);
  82:	39 9a       	sbi	0x07, 1	; 7
    
    //pull-up setup
    PORTB = PORTB & ~(1<<LED_INT);
  84:	2d 98       	cbi	0x05, 5	; 5
    PORTC = PORTC | (1<<LED_EXT);
  86:	41 9a       	sbi	0x08, 1	; 8
    
    PORTB = PORTB ^ (1<<LED_INT);
  88:	95 b1       	in	r25, 0x05	; 5
  8a:	80 e2       	ldi	r24, 0x20	; 32
  8c:	89 27       	eor	r24, r25
  8e:	85 b9       	out	0x05, r24	; 5

    // Infinite loop
    while (1)
    {
        _delay_ms(SHORT_DELAY);
        PORTB = PORTB ^ (1<<LED_INT);
  90:	20 e2       	ldi	r18, 0x20	; 32
        PORTC = PORTC ^ (1<<LED_EXT);
  92:	92 e0       	ldi	r25, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	3f ef       	ldi	r19, 0xFF	; 255
  96:	44 e3       	ldi	r20, 0x34	; 52
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	31 50       	subi	r19, 0x01	; 1
  9c:	40 40       	sbci	r20, 0x00	; 0
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x1a>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x24>
  a4:	00 00       	nop

    // Infinite loop
    while (1)
    {
        _delay_ms(SHORT_DELAY);
        PORTB = PORTB ^ (1<<LED_INT);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 27       	eor	r24, r18
  aa:	85 b9       	out	0x05, r24	; 5
        PORTC = PORTC ^ (1<<LED_EXT);
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	89 27       	eor	r24, r25
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	f0 cf       	rjmp	.-32     	; 0x94 <main+0x14>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
