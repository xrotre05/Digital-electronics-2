
Humidity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000386  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080010e  0080010e  00000428  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cfc  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000622  00000000  00000000  00001b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000218c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f2  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f6  00000000  00000000  0000285e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_18>
  4c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 35       	cpi	r26, 0x53	; 83
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c1 01 	jmp	0x382	; 0x382 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:


int main(void)
{
	// Initialize I2C (TWI)
	twi_init();
  a6:	0e 94 b3 00 	call	0x166	; 0x166 <twi_init>

	// Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 4f 01 	call	0x29e	; 0x29e <uart_init>

	// Configure 16-bit Timer/Counter1 to update FSM
	// Set prescaler to 33 ms and enable interrupt
	TIM1_overflow_1s();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8c 7f       	andi	r24, 0xFC	; 252
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

	// Enables interrupts by setting the global interrupt mask
	sei();
  cc:	78 94       	sei
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x28>

000000d0 <__vector_13>:
    }
}


ISR(TIMER1_OVF_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	00 d0       	rcall	.+0      	; 0xf8 <__vector_13+0x28>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
	static uint8_t addr = 0x5c;            // I2C slave address
	uint8_t result = 1;                 // ACK result from the bus
	char uart_string[2] = "00"; // String for converting numbers by itoa()
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	90 e3       	ldi	r25, 0x30	; 48
 100:	9a 83       	std	Y+2, r25	; 0x02
 102:	89 83       	std	Y+1, r24	; 0x01

	
		twi_start((addr<<1) + TWI_WRITE);	// start I2C comunication with sensor
 104:	88 eb       	ldi	r24, 0xB8	; 184
 106:	0e 94 c2 00 	call	0x184	; 0x184 <twi_start>
				
		twi_write(0);						// state request of data from register 0 
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 df 00 	call	0x1be	; 0x1be <twi_write>
		
		twi_start((addr<<1) + TWI_READ);	// request data from sensor
 110:	89 eb       	ldi	r24, 0xB9	; 185
 112:	0e 94 c2 00 	call	0x184	; 0x184 <twi_start>
		
		uart_puts("\r\nHumidity:\r\n");		// write to uart
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <uart_puts>
		result=twi_read_nack();				// write register data to var. result
 11e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <twi_read_nack>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 122:	4a e0       	ldi	r20, 0x0A	; 10
 124:	be 01       	movw	r22, r28
 126:	6f 5f       	subi	r22, 0xFF	; 255
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 8c 01 	call	0x318	; 0x318 <__itoa_ncheck>
		itoa(result,uart_string,10);		// convert result to string
		uart_puts(uart_string);				// write string to uart
 130:	ce 01       	movw	r24, r28
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	0e 94 7f 01 	call	0x2fe	; 0x2fe <uart_puts>
// 		uart_puts(uart_string);				// write string to uart
// 		uart_putc('\n');
// 		uart_putc('\r');
		
		
		twi_stop();							// stop I2C communication with sensor
 138:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <twi_stop>
				
	}
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	7f 91       	pop	r23
 152:	6f 91       	pop	r22
 154:	5f 91       	pop	r21
 156:	4f 91       	pop	r20
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 166:	87 b1       	in	r24, 0x07	; 7
 168:	8f 7c       	andi	r24, 0xCF	; 207
 16a:	87 b9       	out	0x07, r24	; 7
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	80 63       	ori	r24, 0x30	; 48
 170:	88 b9       	out	0x08, r24	; 8
 172:	e9 eb       	ldi	r30, 0xB9	; 185
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8c 7f       	andi	r24, 0xFC	; 252
 17a:	80 83       	st	Z, r24
 17c:	88 e9       	ldi	r24, 0x98	; 152
 17e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 182:	08 95       	ret

00000184 <twi_start>:
 184:	94 ea       	ldi	r25, 0xA4	; 164
 186:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18e:	99 23       	and	r25, r25
 190:	e4 f7       	brge	.-8      	; 0x18a <twi_start+0x6>
 192:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 196:	84 e8       	ldi	r24, 0x84	; 132
 198:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 19c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a0:	88 23       	and	r24, r24
 1a2:	e4 f7       	brge	.-8      	; 0x19c <twi_start+0x18>
 1a4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1a8:	88 7f       	andi	r24, 0xF8	; 248
 1aa:	88 31       	cpi	r24, 0x18	; 24
 1ac:	21 f0       	breq	.+8      	; 0x1b6 <twi_start+0x32>
 1ae:	80 34       	cpi	r24, 0x40	; 64
 1b0:	21 f4       	brne	.+8      	; 0x1ba <twi_start+0x36>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	08 95       	ret
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	08 95       	ret

000001be <twi_write>:
 1be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1c2:	84 e8       	ldi	r24, 0x84	; 132
 1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1cc:	88 23       	and	r24, r24
 1ce:	e4 f7       	brge	.-8      	; 0x1c8 <twi_write+0xa>
 1d0:	08 95       	ret

000001d2 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 1d2:	84 e8       	ldi	r24, 0x84	; 132
 1d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 1d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1dc:	88 23       	and	r24, r24
 1de:	e4 f7       	brge	.-8      	; 0x1d8 <twi_read_nack+0x6>
    return (TWDR);
 1e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 1e4:	08 95       	ret

000001e6 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 1e6:	84 e9       	ldi	r24, 0x94	; 148
 1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ec:	08 95       	ret

000001ee <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
 202:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 206:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 20a:	8c 71       	andi	r24, 0x1C	; 28
 20c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <UART_RxHead>
 210:	ef 5f       	subi	r30, 0xFF	; 255
 212:	ef 71       	andi	r30, 0x1F	; 31
 214:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <UART_RxTail>
 218:	e9 17       	cp	r30, r25
 21a:	39 f0       	breq	.+14     	; 0x22a <__vector_18+0x3c>
 21c:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <UART_RxHead>
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	ed 5e       	subi	r30, 0xED	; 237
 224:	fe 4f       	sbci	r31, 0xFE	; 254
 226:	20 83       	st	Z, r18
 228:	01 c0       	rjmp	.+2      	; 0x22c <__vector_18+0x3e>
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__data_end>
 230:	89 2b       	or	r24, r25
 232:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_19>:
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
 25c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <UART_TxHead>
 260:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <UART_TxTail>
 264:	98 17       	cp	r25, r24
 266:	69 f0       	breq	.+26     	; 0x282 <__vector_19+0x38>
 268:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <UART_TxTail>
 26c:	ef 5f       	subi	r30, 0xFF	; 255
 26e:	ef 71       	andi	r30, 0x1F	; 31
 270:	e0 93 11 01 	sts	0x0111, r30	; 0x800111 <UART_TxTail>
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ed 5c       	subi	r30, 0xCD	; 205
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	80 81       	ld	r24, Z
 27c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 280:	05 c0       	rjmp	.+10     	; 0x28c <__vector_19+0x42>
 282:	e1 ec       	ldi	r30, 0xC1	; 193
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	8f 7d       	andi	r24, 0xDF	; 223
 28a:	80 83       	st	Z, r24
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <uart_init>:
 29e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <UART_TxHead>
 2a2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <UART_TxTail>
 2a6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <UART_RxHead>
 2aa:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <UART_RxTail>
 2ae:	28 2f       	mov	r18, r24
 2b0:	39 2f       	mov	r19, r25
 2b2:	33 23       	and	r19, r19
 2b4:	1c f4       	brge	.+6      	; 0x2bc <uart_init+0x1e>
 2b6:	22 e0       	ldi	r18, 0x02	; 2
 2b8:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2bc:	90 78       	andi	r25, 0x80	; 128
 2be:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2c6:	88 e9       	ldi	r24, 0x98	; 152
 2c8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2cc:	86 e0       	ldi	r24, 0x06	; 6
 2ce:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2d2:	08 95       	ret

000002d4 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2d4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <UART_TxHead>
 2d8:	2f 5f       	subi	r18, 0xFF	; 255
 2da:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 2dc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <UART_TxTail>
 2e0:	29 17       	cp	r18, r25
 2e2:	e1 f3       	breq	.-8      	; 0x2dc <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 2e4:	e2 2f       	mov	r30, r18
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	ed 5c       	subi	r30, 0xCD	; 205
 2ea:	fe 4f       	sbci	r31, 0xFE	; 254
 2ec:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 2ee:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 2f2:	e1 ec       	ldi	r30, 0xC1	; 193
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	80 62       	ori	r24, 0x20	; 32
 2fa:	80 83       	st	Z, r24
 2fc:	08 95       	ret

000002fe <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
    while (*s)
 304:	03 c0       	rjmp	.+6      	; 0x30c <uart_puts+0xe>
        uart_putc(*s++);
 306:	21 96       	adiw	r28, 0x01	; 1
 308:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 30c:	88 81       	ld	r24, Y
 30e:	81 11       	cpse	r24, r1
 310:	fa cf       	rjmp	.-12     	; 0x306 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <__itoa_ncheck>:
 318:	bb 27       	eor	r27, r27
 31a:	4a 30       	cpi	r20, 0x0A	; 10
 31c:	31 f4       	brne	.+12     	; 0x32a <__itoa_ncheck+0x12>
 31e:	99 23       	and	r25, r25
 320:	22 f4       	brpl	.+8      	; 0x32a <__itoa_ncheck+0x12>
 322:	bd e2       	ldi	r27, 0x2D	; 45
 324:	90 95       	com	r25
 326:	81 95       	neg	r24
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	0c 94 98 01 	jmp	0x330	; 0x330 <__utoa_common>

0000032e <__utoa_ncheck>:
 32e:	bb 27       	eor	r27, r27

00000330 <__utoa_common>:
 330:	fb 01       	movw	r30, r22
 332:	55 27       	eor	r21, r21
 334:	aa 27       	eor	r26, r26
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	aa 1f       	adc	r26, r26
 33c:	a4 17       	cp	r26, r20
 33e:	10 f0       	brcs	.+4      	; 0x344 <__utoa_common+0x14>
 340:	a4 1b       	sub	r26, r20
 342:	83 95       	inc	r24
 344:	50 51       	subi	r21, 0x10	; 16
 346:	b9 f7       	brne	.-18     	; 0x336 <__utoa_common+0x6>
 348:	a0 5d       	subi	r26, 0xD0	; 208
 34a:	aa 33       	cpi	r26, 0x3A	; 58
 34c:	08 f0       	brcs	.+2      	; 0x350 <__utoa_common+0x20>
 34e:	a9 5d       	subi	r26, 0xD9	; 217
 350:	a1 93       	st	Z+, r26
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	79 f7       	brne	.-34     	; 0x334 <__utoa_common+0x4>
 356:	b1 11       	cpse	r27, r1
 358:	b1 93       	st	Z+, r27
 35a:	11 92       	st	Z+, r1
 35c:	cb 01       	movw	r24, r22
 35e:	0c 94 b1 01 	jmp	0x362	; 0x362 <strrev>

00000362 <strrev>:
 362:	dc 01       	movw	r26, r24
 364:	fc 01       	movw	r30, r24
 366:	67 2f       	mov	r22, r23
 368:	71 91       	ld	r23, Z+
 36a:	77 23       	and	r23, r23
 36c:	e1 f7       	brne	.-8      	; 0x366 <strrev+0x4>
 36e:	32 97       	sbiw	r30, 0x02	; 2
 370:	04 c0       	rjmp	.+8      	; 0x37a <strrev+0x18>
 372:	7c 91       	ld	r23, X
 374:	6d 93       	st	X+, r22
 376:	70 83       	st	Z, r23
 378:	62 91       	ld	r22, -Z
 37a:	ae 17       	cp	r26, r30
 37c:	bf 07       	cpc	r27, r31
 37e:	c8 f3       	brcs	.-14     	; 0x372 <strrev+0x10>
 380:	08 95       	ret

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
