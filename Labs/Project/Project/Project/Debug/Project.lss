
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000dc0  00000e54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  0080011a  0080011a  00000e6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000182a  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c10  00000000  00000000  000028a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db7  00000000  00000000  000034b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  0000426c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067e  00000000  00000000  000045b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be2  00000000  00000000  00004c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005818  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  34:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_13>
  38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  48:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__vector_18>
  4c:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_19>
  50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 40       	sbci	r16, 0x00	; 0
  6a:	7a 10       	cpse	r7, r10
  6c:	f3 5a       	subi	r31, 0xA3	; 163
  6e:	00 a0       	ldd	r0, Z+32	; 0x20
  70:	72 4e       	sbci	r23, 0xE2	; 226
  72:	18 09       	sbc	r17, r8
  74:	00 10       	cpse	r0, r0
  76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
  78:	e8 00       	.word	0x00e8	; ????
  7a:	00 e8       	ldi	r16, 0x80	; 128
  7c:	76 48       	sbci	r23, 0x86	; 134
  7e:	17 00       	.word	0x0017	; ????
  80:	00 e4       	ldi	r16, 0x40	; 64
  82:	0b 54       	subi	r16, 0x4B	; 75
  84:	02 00       	.word	0x0002	; ????
  86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
  88:	9a 3b       	cpi	r25, 0xBA	; 186
  8a:	00 00       	nop
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	f5 05       	cpc	r31, r5
  90:	00 00       	nop
  92:	80 96       	adiw	r24, 0x20	; 32
  94:	98 00       	.word	0x0098	; ????
  96:	00 00       	nop
  98:	40 42       	sbci	r20, 0x20	; 32
  9a:	0f 00       	.word	0x000f	; ????
  9c:	00 00       	nop
  9e:	a0 86       	std	Z+8, r10	; 0x08
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 00       	nop
  a4:	10 27       	eor	r17, r16
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	e8 03       	fmulsu	r22, r16
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	64 00       	.word	0x0064	; ????
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	0a 00       	.word	0x000a	; ????
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	01 00       	.word	0x0001	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	2c 76       	andi	r18, 0x6C	; 108
  c4:	d8 88       	ldd	r13, Y+16	; 0x10
  c6:	dc 67       	ori	r29, 0x7C	; 124
  c8:	4f 08       	sbc	r4, r15
  ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
  cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
  ce:	ae 59       	subi	r26, 0x9E	; 158
  d0:	e1 b1       	in	r30, 0x01	; 1
  d2:	b7 96       	adiw	r30, 0x27	; 39
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	e4 53       	subi	r30, 0x34	; 52
  d8:	c6 3a       	cpi	r28, 0xA6	; 166
  da:	e6 51       	subi	r30, 0x16	; 22
  dc:	99 76       	andi	r25, 0x69	; 105
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <__divsf3+0x4>
  e2:	84 26       	eor	r8, r20
  e4:	eb 89       	ldd	r30, Y+19	; 0x13
  e6:	8c 9b       	sbis	0x11, 4	; 17
  e8:	62 ed       	ldi	r22, 0xD2	; 210
  ea:	40 7c       	andi	r20, 0xC0	; 192
  ec:	6f fc       	.word	0xfc6f	; ????
  ee:	ef bc       	out	0x2f, r14	; 47
  f0:	9c 9f       	mul	r25, r28
  f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
  f4:	ba a5       	ldd	r27, Y+42	; 0x2a
  f6:	6f a5       	ldd	r22, Y+47	; 0x2f
  f8:	f4 90       	lpm	r15, Z
  fa:	05 5a       	subi	r16, 0xA5	; 165
  fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
  fe:	5c 93       	st	X, r21
 100:	6b 6c       	ori	r22, 0xCB	; 203
 102:	f9 67       	ori	r31, 0x79	; 121
 104:	6d c1       	rjmp	.+730    	; 0x3e0 <lcd_init+0x96>
 106:	1b fc       	.word	0xfc1b	; ????
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	0d 47       	sbci	r16, 0x7D	; 125
 10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
 10e:	20 e6       	ldi	r18, 0x60	; 96
 110:	b5 00       	.word	0x00b5	; ????
 112:	d0 ed       	ldi	r29, 0xD0	; 208
 114:	90 2e       	mov	r9, r16
 116:	03 00       	.word	0x0003	; ????
 118:	94 35       	cpi	r25, 0x54	; 84
 11a:	77 05       	cpc	r23, r7
 11c:	00 80       	ld	r0, Z
 11e:	84 1e       	adc	r8, r20
 120:	08 00       	.word	0x0008	; ????
 122:	00 20       	and	r0, r0
 124:	4e 0a       	sbc	r4, r30
 126:	00 00       	nop
 128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
 12a:	0c 33       	cpi	r16, 0x3C	; 60
 12c:	33 33       	cpi	r19, 0x33	; 51
 12e:	33 0f       	add	r19, r19
 130:	98 6e       	ori	r25, 0xE8	; 232
 132:	12 83       	std	Z+2, r17	; 0x02
 134:	11 41       	sbci	r17, 0x11	; 17
 136:	ef 8d       	ldd	r30, Y+31	; 0x1f
 138:	21 14       	cp	r2, r1
 13a:	89 3b       	cpi	r24, 0xB9	; 185
 13c:	e6 55       	subi	r30, 0x56	; 86
 13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
 140:	fe e6       	ldi	r31, 0x6E	; 110
 142:	db 18       	sub	r13, r11
 144:	d1 84       	ldd	r13, Z+9	; 0x09
 146:	4b 38       	cpi	r20, 0x8B	; 139
 148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
 14a:	7c 1d       	adc	r23, r12
 14c:	90 1d       	adc	r25, r0
 14e:	a4 bb       	out	0x14, r26	; 20
 150:	e4 24       	eor	r14, r4
 152:	20 32       	cpi	r18, 0x20	; 32
 154:	84 72       	andi	r24, 0x24	; 36
 156:	5e 22       	and	r5, r30
 158:	81 00       	.word	0x0081	; ????
 15a:	c9 f1       	breq	.+114    	; 0x1ce <GPIO_config_input_pullup+0x16>
 15c:	24 ec       	ldi	r18, 0xC4	; 196
 15e:	a1 e5       	ldi	r26, 0x51	; 81
 160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d8 e0       	ldi	r29, 0x08	; 8
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	e0 ec       	ldi	r30, 0xC0	; 192
 176:	fd e0       	ldi	r31, 0x0D	; 13
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	aa 31       	cpi	r26, 0x1A	; 26
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	aa e1       	ldi	r26, 0x1A	; 26
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	a1 36       	cpi	r26, 0x61	; 97
 190:	b2 07       	cpc	r27, r18
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <main>
 198:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <_exit>

0000019c <__bad_interrupt>:
 19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <GPIO_config_output>:

void GPIO_config_input_nopull(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name & ~(1<<pin_num);   // Data Register
 1a0:	fc 01       	movw	r30, r24
 1a2:	40 81       	ld	r20, Z
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <GPIO_config_output+0xe>
 1aa:	22 0f       	add	r18, r18
 1ac:	33 1f       	adc	r19, r19
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <GPIO_config_output+0xa>
 1b2:	24 2b       	or	r18, r20
 1b4:	20 83       	st	Z, r18
 1b6:	08 95       	ret

000001b8 <GPIO_config_input_pullup>:
 * Input:    reg_name - Address of Data Direction Register, such as &DDRB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
 1b8:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
 1ba:	80 81       	ld	r24, Z
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <GPIO_config_input_pullup+0xe>
 1c2:	22 0f       	add	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <GPIO_config_input_pullup+0xa>
 1ca:	92 2f       	mov	r25, r18
 1cc:	90 95       	com	r25
 1ce:	89 23       	and	r24, r25
 1d0:	80 83       	st	Z, r24
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
 1d2:	81 81       	ldd	r24, Z+1	; 0x01
 1d4:	28 2b       	or	r18, r24
 1d6:	21 83       	std	Z+1, r18	; 0x01
 1d8:	08 95       	ret

000001da <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
 1da:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
 1dc:	90 81       	ld	r25, Z
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <GPIO_write_low+0xe>
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <GPIO_write_low+0xa>
 1ec:	20 95       	com	r18
 1ee:	29 23       	and	r18, r25
 1f0:	20 83       	st	Z, r18
 1f2:	08 95       	ret

000001f4 <GPIO_write_high>:
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)

{
    *reg_name = *reg_name |(1<<pin_num);
 1f4:	fc 01       	movw	r30, r24
 1f6:	40 81       	ld	r20, Z
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <GPIO_write_high+0xe>
 1fe:	22 0f       	add	r18, r18
 200:	33 1f       	adc	r19, r19
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <GPIO_write_high+0xa>
 206:	24 2b       	or	r18, r20
 208:	20 83       	st	Z, r18
 20a:	08 95       	ret

0000020c <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	85 b9       	out	0x05, r24	; 5
 212:	85 e0       	ldi	r24, 0x05	; 5
 214:	8a 95       	dec	r24
 216:	f1 f7       	brne	.-4      	; 0x214 <toggle_e+0x8>
 218:	00 00       	nop
 21a:	85 b1       	in	r24, 0x05	; 5
 21c:	8d 7f       	andi	r24, 0xFD	; 253
 21e:	85 b9       	out	0x05, r24	; 5
 220:	08 95       	ret

00000222 <lcd_write>:
 222:	cf 93       	push	r28
 224:	c8 2f       	mov	r28, r24
 226:	66 23       	and	r22, r22
 228:	21 f0       	breq	.+8      	; 0x232 <lcd_write+0x10>
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	85 b9       	out	0x05, r24	; 5
 230:	03 c0       	rjmp	.+6      	; 0x238 <lcd_write+0x16>
 232:	85 b1       	in	r24, 0x05	; 5
 234:	8e 7f       	andi	r24, 0xFE	; 254
 236:	85 b9       	out	0x05, r24	; 5
 238:	8a b1       	in	r24, 0x0a	; 10
 23a:	80 61       	ori	r24, 0x10	; 16
 23c:	8a b9       	out	0x0a, r24	; 10
 23e:	8a b1       	in	r24, 0x0a	; 10
 240:	80 62       	ori	r24, 0x20	; 32
 242:	8a b9       	out	0x0a, r24	; 10
 244:	8a b1       	in	r24, 0x0a	; 10
 246:	80 64       	ori	r24, 0x40	; 64
 248:	8a b9       	out	0x0a, r24	; 10
 24a:	8a b1       	in	r24, 0x0a	; 10
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	8a b9       	out	0x0a, r24	; 10
 250:	8b b1       	in	r24, 0x0b	; 11
 252:	8f 77       	andi	r24, 0x7F	; 127
 254:	8b b9       	out	0x0b, r24	; 11
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	8f 7b       	andi	r24, 0xBF	; 191
 25a:	8b b9       	out	0x0b, r24	; 11
 25c:	8b b1       	in	r24, 0x0b	; 11
 25e:	8f 7d       	andi	r24, 0xDF	; 223
 260:	8b b9       	out	0x0b, r24	; 11
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	8f 7e       	andi	r24, 0xEF	; 239
 266:	8b b9       	out	0x0b, r24	; 11
 268:	cc 23       	and	r28, r28
 26a:	1c f4       	brge	.+6      	; 0x272 <lcd_write+0x50>
 26c:	8b b1       	in	r24, 0x0b	; 11
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	8b b9       	out	0x0b, r24	; 11
 272:	c6 ff       	sbrs	r28, 6
 274:	03 c0       	rjmp	.+6      	; 0x27c <lcd_write+0x5a>
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	8b b9       	out	0x0b, r24	; 11
 27c:	c5 ff       	sbrs	r28, 5
 27e:	03 c0       	rjmp	.+6      	; 0x286 <lcd_write+0x64>
 280:	8b b1       	in	r24, 0x0b	; 11
 282:	80 62       	ori	r24, 0x20	; 32
 284:	8b b9       	out	0x0b, r24	; 11
 286:	c4 ff       	sbrs	r28, 4
 288:	03 c0       	rjmp	.+6      	; 0x290 <lcd_write+0x6e>
 28a:	8b b1       	in	r24, 0x0b	; 11
 28c:	80 61       	ori	r24, 0x10	; 16
 28e:	8b b9       	out	0x0b, r24	; 11
 290:	0e 94 06 01 	call	0x20c	; 0x20c <toggle_e>
 294:	8b b1       	in	r24, 0x0b	; 11
 296:	8f 77       	andi	r24, 0x7F	; 127
 298:	8b b9       	out	0x0b, r24	; 11
 29a:	8b b1       	in	r24, 0x0b	; 11
 29c:	8f 7b       	andi	r24, 0xBF	; 191
 29e:	8b b9       	out	0x0b, r24	; 11
 2a0:	8b b1       	in	r24, 0x0b	; 11
 2a2:	8f 7d       	andi	r24, 0xDF	; 223
 2a4:	8b b9       	out	0x0b, r24	; 11
 2a6:	8b b1       	in	r24, 0x0b	; 11
 2a8:	8f 7e       	andi	r24, 0xEF	; 239
 2aa:	8b b9       	out	0x0b, r24	; 11
 2ac:	c3 ff       	sbrs	r28, 3
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <lcd_write+0x94>
 2b0:	8b b1       	in	r24, 0x0b	; 11
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	8b b9       	out	0x0b, r24	; 11
 2b6:	c2 ff       	sbrs	r28, 2
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <lcd_write+0x9e>
 2ba:	8b b1       	in	r24, 0x0b	; 11
 2bc:	80 64       	ori	r24, 0x40	; 64
 2be:	8b b9       	out	0x0b, r24	; 11
 2c0:	c1 ff       	sbrs	r28, 1
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <lcd_write+0xa8>
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	8b b9       	out	0x0b, r24	; 11
 2ca:	c0 ff       	sbrs	r28, 0
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <lcd_write+0xb2>
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	80 61       	ori	r24, 0x10	; 16
 2d2:	8b b9       	out	0x0b, r24	; 11
 2d4:	0e 94 06 01 	call	0x20c	; 0x20c <toggle_e>
 2d8:	8b b1       	in	r24, 0x0b	; 11
 2da:	80 61       	ori	r24, 0x10	; 16
 2dc:	8b b9       	out	0x0b, r24	; 11
 2de:	8b b1       	in	r24, 0x0b	; 11
 2e0:	80 62       	ori	r24, 0x20	; 32
 2e2:	8b b9       	out	0x0b, r24	; 11
 2e4:	8b b1       	in	r24, 0x0b	; 11
 2e6:	80 64       	ori	r24, 0x40	; 64
 2e8:	8b b9       	out	0x0b, r24	; 11
 2ea:	8b b1       	in	r24, 0x0b	; 11
 2ec:	80 68       	ori	r24, 0x80	; 128
 2ee:	8b b9       	out	0x0b, r24	; 11
 2f0:	87 eb       	ldi	r24, 0xB7	; 183
 2f2:	9b e0       	ldi	r25, 0x0B	; 11
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd_write+0xd2>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd_write+0xd8>
 2fa:	00 00       	nop
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <lcd_command>:
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write>
 306:	08 95       	ret

00000308 <lcd_gotoxy>:
 308:	61 11       	cpse	r22, r1
 30a:	04 c0       	rjmp	.+8      	; 0x314 <lcd_gotoxy+0xc>
 30c:	80 58       	subi	r24, 0x80	; 128
 30e:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
 312:	08 95       	ret
 314:	80 54       	subi	r24, 0x40	; 64
 316:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
 31a:	08 95       	ret

0000031c <lcd_clrscr>:
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
 322:	08 95       	ret

00000324 <lcd_putc>:
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	0e 94 11 01 	call	0x222	; 0x222 <lcd_write>
 32a:	08 95       	ret

0000032c <lcd_puts>:
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	fc 01       	movw	r30, r24
 332:	03 c0       	rjmp	.+6      	; 0x33a <lcd_puts+0xe>
 334:	0e 94 92 01 	call	0x324	; 0x324 <lcd_putc>
 338:	fe 01       	movw	r30, r28
 33a:	ef 01       	movw	r28, r30
 33c:	21 96       	adiw	r28, 0x01	; 1
 33e:	80 81       	ld	r24, Z
 340:	81 11       	cpse	r24, r1
 342:	f8 cf       	rjmp	.-16     	; 0x334 <lcd_puts+0x8>
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 34a:	cf 93       	push	r28
 34c:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 34e:	84 b1       	in	r24, 0x04	; 4
 350:	81 60       	ori	r24, 0x01	; 1
 352:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 354:	8a b1       	in	r24, 0x0a	; 10
 356:	80 62       	ori	r24, 0x20	; 32
 358:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 35a:	84 b1       	in	r24, 0x04	; 4
 35c:	82 60       	ori	r24, 0x02	; 2
 35e:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 360:	8a b1       	in	r24, 0x0a	; 10
 362:	80 61       	ori	r24, 0x10	; 16
 364:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 366:	8a b1       	in	r24, 0x0a	; 10
 368:	80 62       	ori	r24, 0x20	; 32
 36a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 36c:	8a b1       	in	r24, 0x0a	; 10
 36e:	80 64       	ori	r24, 0x40	; 64
 370:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 372:	8a b1       	in	r24, 0x0a	; 10
 374:	80 68       	ori	r24, 0x80	; 128
 376:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	99 ef       	ldi	r25, 0xF9	; 249
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_init+0x32>
 380:	00 c0       	rjmp	.+0      	; 0x382 <lcd_init+0x38>
 382:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 384:	8b b1       	in	r24, 0x0b	; 11
 386:	80 62       	ori	r24, 0x20	; 32
 388:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 38a:	8b b1       	in	r24, 0x0b	; 11
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 390:	0e 94 06 01 	call	0x20c	; 0x20c <toggle_e>
 394:	8f e1       	ldi	r24, 0x1F	; 31
 396:	9e e4       	ldi	r25, 0x4E	; 78
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_init+0x4e>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <lcd_init+0x54>
 39e:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 3a0:	0e 94 06 01 	call	0x20c	; 0x20c <toggle_e>
 3a4:	8f ef       	ldi	r24, 0xFF	; 255
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_init+0x5e>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <lcd_init+0x64>
 3ae:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 3b0:	0e 94 06 01 	call	0x20c	; 0x20c <toggle_e>
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <lcd_init+0x6e>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <lcd_init+0x74>
 3be:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 3c0:	8b b1       	in	r24, 0x0b	; 11
 3c2:	8f 7e       	andi	r24, 0xEF	; 239
 3c4:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 3c6:	0e 94 06 01 	call	0x20c	; 0x20c <toggle_e>
 3ca:	8f ef       	ldi	r24, 0xFF	; 255
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <lcd_init+0x84>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <lcd_init+0x8a>
 3d4:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 3d6:	88 e2       	ldi	r24, 0x28	; 40
 3d8:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 3dc:	88 e0       	ldi	r24, 0x08	; 8
 3de:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 3e2:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 3e6:	86 e0       	ldi	r24, 0x06	; 6
 3e8:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 3ec:	8c 2f       	mov	r24, r28
 3ee:	0e 94 80 01 	call	0x300	; 0x300 <lcd_command>
}/* lcd_init */
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <main>:
#include <string.h>

int TimerOverflow = 0;

int main(void)
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	2a 97       	sbiw	r28, 0x0a	; 10
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
     long count;
     double distance;
	 
	 //input output setup
     
     GPIO_config_output(&DDRB, TRIGGER);
 40a:	64 e0       	ldi	r22, 0x04	; 4
 40c:	84 e2       	ldi	r24, 0x24	; 36
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GPIO_config_output>
     GPIO_write_low(&PORTB, TRIGGER);
 414:	64 e0       	ldi	r22, 0x04	; 4
 416:	85 e2       	ldi	r24, 0x25	; 37
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_write_low>
     //PORTB = PORTB & ~(1<<LED_INT);
     //DDRB = DDRB | (1<<LED_INT);
	 
	 GPIO_config_input_pullup(&DDRB, ECHO);
 41e:	65 e0       	ldi	r22, 0x05	; 5
 420:	84 e2       	ldi	r24, 0x24	; 36
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <GPIO_config_input_pullup>
	 
	 //PORTB = PORTB & ~(1<<LED_INT);
	 //DDRB = DDRB | (1<<LED_INT);
	 
	 GPIO_config_output(&DDRB, PUMP);
 428:	63 e0       	ldi	r22, 0x03	; 3
 42a:	84 e2       	ldi	r24, 0x24	; 36
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GPIO_config_output>
	 GPIO_write_low(&PORTB, PUMP);
 432:	63 e0       	ldi	r22, 0x03	; 3
 434:	85 e2       	ldi	r24, 0x25	; 37
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_write_low>
	 //PORTB = PORTB & ~(1<<LED_INT);
	 //DDRB = DDRB | (1<<LED_INT);
	
	
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 43c:	8c e0       	ldi	r24, 0x0C	; 12
 43e:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_init>
	lcd_gotoxy(1, 0); lcd_puts("level:");
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 84 01 	call	0x308	; 0x308 <lcd_gotoxy>
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_puts>
	lcd_gotoxy(3, 1); lcd_puts("state:");
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	0e 94 84 01 	call	0x308	; 0x308 <lcd_gotoxy>
 45a:	87 e0       	ldi	r24, 0x07	; 7
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_puts>
	lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	88 e0       	ldi	r24, 0x08	; 8
 466:	0e 94 84 01 	call	0x308	; 0x308 <lcd_gotoxy>
 46a:	8e e0       	ldi	r24, 0x0E	; 14
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_puts>
	lcd_gotoxy(8, 1); lcd_puts("b");    // Put button name here
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	88 e0       	ldi	r24, 0x08	; 8
 476:	0e 94 84 01 	call	0x308	; 0x308 <lcd_gotoxy>
 47a:	80 e1       	ldi	r24, 0x10	; 16
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_puts>
	
	// Initialize I2C (TWI)
    twi_init();
 482:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 486:	87 e6       	ldi	r24, 0x67	; 103
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 3a 03 	call	0x674	; 0x674 <uart_init>

    // Configure 16-bit Timer/Counter0 to update FSM
    // Set prescaler to 1 s and enable interrupt
    TIM0_overflow_1s();
 48e:	85 b5       	in	r24, 0x25	; 37
 490:	8c 7f       	andi	r24, 0xFC	; 252
 492:	85 bd       	out	0x25, r24	; 37
 494:	85 b5       	in	r24, 0x25	; 37
 496:	84 60       	ori	r24, 0x04	; 4
 498:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 49a:	ee e6       	ldi	r30, 0x6E	; 110
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	80 83       	st	Z, r24

	TIM1_stop();
 4a4:	e1 e8       	ldi	r30, 0x81	; 129
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	88 7f       	andi	r24, 0xF8	; 248
 4ac:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 4ae:	ef e6       	ldi	r30, 0x6F	; 111
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	81 60       	ori	r24, 0x01	; 1
 4b6:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
    sei();
 4b8:	78 94       	sei
    // Infinite loop
    while (1)
    {
        /* Empty loop. All subsequent operations are performed exclusively 
         * inside interrupt service routines ISRs */
		GPIO_write_high(&PORTB, TRIGGER);
 4ba:	64 e0       	ldi	r22, 0x04	; 4
 4bc:	85 e2       	ldi	r24, 0x25	; 37
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <GPIO_write_high>
 4c4:	25 e3       	ldi	r18, 0x35	; 53
 4c6:	2a 95       	dec	r18
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ca:	00 00       	nop
		_delay_us(10);
		GPIO_write_low(&PORTB, TRIGGER);
 4cc:	64 e0       	ldi	r22, 0x04	; 4
 4ce:	85 e2       	ldi	r24, 0x25	; 37
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_write_low>
		
		TCNT1 = 0;		/* Clear Timer counter */
 4d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
 4de:	81 e4       	ldi	r24, 0x41	; 65
 4e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TIFR1 = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 4e4:	80 e2       	ldi	r24, 0x20	; 32
 4e6:	86 bb       	out	0x16, r24	; 22
		TIFR1 = 1<<TOV1;	/* Clear Timer Overflow flag */
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	86 bb       	out	0x16, r24	; 22
		
		/*Calculate width of Echo by Input Capture (ICP) */
		
		while ((TIFR1 & (1 << ICF1)) == 0);/* Wait for rising edge */
 4ec:	b5 9b       	sbis	0x16, 5	; 22
 4ee:	fe cf       	rjmp	.-4      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
		TCNT1 = 0;	/* Clear Timer counter */
 4f0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4f4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TIFR1 = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 4fe:	90 e2       	ldi	r25, 0x20	; 32
 500:	96 bb       	out	0x16, r25	; 22
		TIFR1 = 1<<TOV1;	/* Clear Timer Overflow flag */
 502:	86 bb       	out	0x16, r24	; 22
		TimerOverflow = 0;/* Clear Timer overflow count */
 504:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 508:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>

		while ((TIFR1 & (1 << ICF1)) == 0);/* Wait for falling edge */
 50c:	b5 9b       	sbis	0x16, 5	; 22
 50e:	fe cf       	rjmp	.-4      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
		count = ICR1 + (65535 * TimerOverflow);	/* Take count */
 510:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 514:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
 51c:	0e 94 c9 03 	call	0x792	; 0x792 <__floatsisf>
 520:	29 e2       	ldi	r18, 0x29	; 41
 522:	3c e3       	ldi	r19, 0x3C	; 60
 524:	49 ee       	ldi	r20, 0xE9	; 233
 526:	53 e4       	ldi	r21, 0x43	; 67
 528:	0e 94 55 03 	call	0x6aa	; 0x6aa <__divsf3>

		dtostrf(distance, 2, 2, string);/* distance to string */
 52c:	9e 01       	movw	r18, r28
 52e:	2f 5f       	subi	r18, 0xFF	; 255
 530:	3f 4f       	sbci	r19, 0xFF	; 255
 532:	79 01       	movw	r14, r18
 534:	89 01       	movw	r16, r18
 536:	22 e0       	ldi	r18, 0x02	; 2
 538:	42 e0       	ldi	r20, 0x02	; 2
 53a:	0e 94 55 04 	call	0x8aa	; 0x8aa <dtostrf>
		strcat(string, " cm   ");	/* Concat unit i.e.cm */
 53e:	d7 01       	movw	r26, r14
 540:	0d 90       	ld	r0, X+
 542:	00 20       	and	r0, r0
 544:	e9 f7       	brne	.-6      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 546:	11 97       	sbiw	r26, 0x01	; 1
 548:	87 e0       	ldi	r24, 0x07	; 7
 54a:	e2 e1       	ldi	r30, 0x12	; 18
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	01 90       	ld	r0, Z+
 550:	0d 92       	st	X+, r0
 552:	8a 95       	dec	r24
 554:	e1 f7       	brne	.-8      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
		
		lcd_gotoxy(8, 0); 
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	88 e0       	ldi	r24, 0x08	; 8
 55a:	0e 94 84 01 	call	0x308	; 0x308 <lcd_gotoxy>
		lcd_puts(string);	/* Print distance */
 55e:	c7 01       	movw	r24, r14
 560:	0e 94 96 01 	call	0x32c	; 0x32c <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 564:	3f ef       	ldi	r19, 0xFF	; 255
 566:	83 ec       	ldi	r24, 0xC3	; 195
 568:	99 e0       	ldi	r25, 0x09	; 9
 56a:	31 50       	subi	r19, 0x01	; 1
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 572:	00 c0       	rjmp	.+0      	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 574:	00 00       	nop
 576:	a1 cf       	rjmp	.-190    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>

00000578 <__vector_13>:
    // Will never reach this
    return 0;
	}

ISR(TIMER1_OVF_vect)
{
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	8f 93       	push	r24
 584:	9f 93       	push	r25
	
	TimerOverflow++;	/* Increment Timer Overflow count */			
 586:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 58a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 594:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>

 598:	9f 91       	pop	r25
 59a:	8f 91       	pop	r24
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 5a6:	87 b1       	in	r24, 0x07	; 7
 5a8:	8f 7c       	andi	r24, 0xCF	; 207
 5aa:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 5ac:	88 b1       	in	r24, 0x08	; 8
 5ae:	80 63       	ori	r24, 0x30	; 48
 5b0:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 5b2:	e9 eb       	ldi	r30, 0xB9	; 185
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	8c 7f       	andi	r24, 0xFC	; 252
 5ba:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 5bc:	88 e9       	ldi	r24, 0x98	; 152
 5be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 5c2:	08 95       	ret

000005c4 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 5c4:	1f 92       	push	r1
 5c6:	0f 92       	push	r0
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	0f 92       	push	r0
 5cc:	11 24       	eor	r1, r1
 5ce:	2f 93       	push	r18
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 5d8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 5dc:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 5e0:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 5e2:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UART_RxHead>
 5e6:	ef 5f       	subi	r30, 0xFF	; 255
 5e8:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 5ea:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <UART_RxTail>
 5ee:	e9 17       	cp	r30, r25
 5f0:	39 f0       	breq	.+14     	; 0x600 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 5f2:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	ef 5d       	subi	r30, 0xDF	; 223
 5fa:	fe 4f       	sbci	r31, 0xFE	; 254
 5fc:	20 83       	st	Z, r18
 5fe:	01 c0       	rjmp	.+2      	; 0x602 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 600:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 602:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <UART_LastRxError>
 606:	89 2b       	or	r24, r25
 608:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <UART_LastRxError>
}
 60c:	ff 91       	pop	r31
 60e:	ef 91       	pop	r30
 610:	9f 91       	pop	r25
 612:	8f 91       	pop	r24
 614:	2f 91       	pop	r18
 616:	0f 90       	pop	r0
 618:	0f be       	out	0x3f, r0	; 63
 61a:	0f 90       	pop	r0
 61c:	1f 90       	pop	r1
 61e:	18 95       	reti

00000620 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 620:	1f 92       	push	r1
 622:	0f 92       	push	r0
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	0f 92       	push	r0
 628:	11 24       	eor	r1, r1
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
 62e:	ef 93       	push	r30
 630:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 632:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <UART_TxHead>
 636:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <UART_TxTail>
 63a:	98 17       	cp	r25, r24
 63c:	69 f0       	breq	.+26     	; 0x658 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 63e:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <UART_TxTail>
 642:	ef 5f       	subi	r30, 0xFF	; 255
 644:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 646:	e0 93 1f 01 	sts	0x011F, r30	; 0x80011f <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	ef 5b       	subi	r30, 0xBF	; 191
 64e:	fe 4f       	sbci	r31, 0xFE	; 254
 650:	80 81       	ld	r24, Z
 652:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 656:	05 c0       	rjmp	.+10     	; 0x662 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 658:	e1 ec       	ldi	r30, 0xC1	; 193
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	8f 7d       	andi	r24, 0xDF	; 223
 660:	80 83       	st	Z, r24
    }
}
 662:	ff 91       	pop	r31
 664:	ef 91       	pop	r30
 666:	9f 91       	pop	r25
 668:	8f 91       	pop	r24
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 674:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <UART_TxHead>
    UART_TxTail = 0;
 678:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <UART_TxTail>
    UART_RxHead = 0;
 67c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <UART_RxHead>
    UART_RxTail = 0;
 680:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 684:	28 2f       	mov	r18, r24
 686:	39 2f       	mov	r19, r25
 688:	33 23       	and	r19, r19
 68a:	1c f4       	brge	.+6      	; 0x692 <uart_init+0x1e>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 68c:	22 e0       	ldi	r18, 0x02	; 2
 68e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 692:	90 78       	andi	r25, 0x80	; 128
 694:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 698:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 69c:	88 e9       	ldi	r24, 0x98	; 152
 69e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 6a2:	86 e0       	ldi	r24, 0x06	; 6
 6a4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 6a8:	08 95       	ret

000006aa <__divsf3>:
 6aa:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__divsf3x>
 6ae:	0c 94 1b 04 	jmp	0x836	; 0x836 <__fp_round>
 6b2:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscB>
 6b6:	58 f0       	brcs	.+22     	; 0x6ce <__divsf3+0x24>
 6b8:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscA>
 6bc:	40 f0       	brcs	.+16     	; 0x6ce <__divsf3+0x24>
 6be:	29 f4       	brne	.+10     	; 0x6ca <__divsf3+0x20>
 6c0:	5f 3f       	cpi	r21, 0xFF	; 255
 6c2:	29 f0       	breq	.+10     	; 0x6ce <__divsf3+0x24>
 6c4:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_inf>
 6c8:	51 11       	cpse	r21, r1
 6ca:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_szero>
 6ce:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_nan>

000006d2 <__divsf3x>:
 6d2:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_split3>
 6d6:	68 f3       	brcs	.-38     	; 0x6b2 <__divsf3+0x8>

000006d8 <__divsf3_pse>:
 6d8:	99 23       	and	r25, r25
 6da:	b1 f3       	breq	.-20     	; 0x6c8 <__divsf3+0x1e>
 6dc:	55 23       	and	r21, r21
 6de:	91 f3       	breq	.-28     	; 0x6c4 <__divsf3+0x1a>
 6e0:	95 1b       	sub	r25, r21
 6e2:	55 0b       	sbc	r21, r21
 6e4:	bb 27       	eor	r27, r27
 6e6:	aa 27       	eor	r26, r26
 6e8:	62 17       	cp	r22, r18
 6ea:	73 07       	cpc	r23, r19
 6ec:	84 07       	cpc	r24, r20
 6ee:	38 f0       	brcs	.+14     	; 0x6fe <__divsf3_pse+0x26>
 6f0:	9f 5f       	subi	r25, 0xFF	; 255
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255
 6f4:	22 0f       	add	r18, r18
 6f6:	33 1f       	adc	r19, r19
 6f8:	44 1f       	adc	r20, r20
 6fa:	aa 1f       	adc	r26, r26
 6fc:	a9 f3       	breq	.-22     	; 0x6e8 <__divsf3_pse+0x10>
 6fe:	35 d0       	rcall	.+106    	; 0x76a <__divsf3_pse+0x92>
 700:	0e 2e       	mov	r0, r30
 702:	3a f0       	brmi	.+14     	; 0x712 <__divsf3_pse+0x3a>
 704:	e0 e8       	ldi	r30, 0x80	; 128
 706:	32 d0       	rcall	.+100    	; 0x76c <__divsf3_pse+0x94>
 708:	91 50       	subi	r25, 0x01	; 1
 70a:	50 40       	sbci	r21, 0x00	; 0
 70c:	e6 95       	lsr	r30
 70e:	00 1c       	adc	r0, r0
 710:	ca f7       	brpl	.-14     	; 0x704 <__divsf3_pse+0x2c>
 712:	2b d0       	rcall	.+86     	; 0x76a <__divsf3_pse+0x92>
 714:	fe 2f       	mov	r31, r30
 716:	29 d0       	rcall	.+82     	; 0x76a <__divsf3_pse+0x92>
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	bb 1f       	adc	r27, r27
 720:	26 17       	cp	r18, r22
 722:	37 07       	cpc	r19, r23
 724:	48 07       	cpc	r20, r24
 726:	ab 07       	cpc	r26, r27
 728:	b0 e8       	ldi	r27, 0x80	; 128
 72a:	09 f0       	breq	.+2      	; 0x72e <__divsf3_pse+0x56>
 72c:	bb 0b       	sbc	r27, r27
 72e:	80 2d       	mov	r24, r0
 730:	bf 01       	movw	r22, r30
 732:	ff 27       	eor	r31, r31
 734:	93 58       	subi	r25, 0x83	; 131
 736:	5f 4f       	sbci	r21, 0xFF	; 255
 738:	3a f0       	brmi	.+14     	; 0x748 <__divsf3_pse+0x70>
 73a:	9e 3f       	cpi	r25, 0xFE	; 254
 73c:	51 05       	cpc	r21, r1
 73e:	78 f0       	brcs	.+30     	; 0x75e <__divsf3_pse+0x86>
 740:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_inf>
 744:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__fp_szero>
 748:	5f 3f       	cpi	r21, 0xFF	; 255
 74a:	e4 f3       	brlt	.-8      	; 0x744 <__divsf3_pse+0x6c>
 74c:	98 3e       	cpi	r25, 0xE8	; 232
 74e:	d4 f3       	brlt	.-12     	; 0x744 <__divsf3_pse+0x6c>
 750:	86 95       	lsr	r24
 752:	77 95       	ror	r23
 754:	67 95       	ror	r22
 756:	b7 95       	ror	r27
 758:	f7 95       	ror	r31
 75a:	9f 5f       	subi	r25, 0xFF	; 255
 75c:	c9 f7       	brne	.-14     	; 0x750 <__divsf3_pse+0x78>
 75e:	88 0f       	add	r24, r24
 760:	91 1d       	adc	r25, r1
 762:	96 95       	lsr	r25
 764:	87 95       	ror	r24
 766:	97 f9       	bld	r25, 7
 768:	08 95       	ret
 76a:	e1 e0       	ldi	r30, 0x01	; 1
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	bb 1f       	adc	r27, r27
 774:	62 17       	cp	r22, r18
 776:	73 07       	cpc	r23, r19
 778:	84 07       	cpc	r24, r20
 77a:	ba 07       	cpc	r27, r26
 77c:	20 f0       	brcs	.+8      	; 0x786 <__divsf3_pse+0xae>
 77e:	62 1b       	sub	r22, r18
 780:	73 0b       	sbc	r23, r19
 782:	84 0b       	sbc	r24, r20
 784:	ba 0b       	sbc	r27, r26
 786:	ee 1f       	adc	r30, r30
 788:	88 f7       	brcc	.-30     	; 0x76c <__divsf3_pse+0x94>
 78a:	e0 95       	com	r30
 78c:	08 95       	ret

0000078e <__floatunsisf>:
 78e:	e8 94       	clt
 790:	09 c0       	rjmp	.+18     	; 0x7a4 <__floatsisf+0x12>

00000792 <__floatsisf>:
 792:	97 fb       	bst	r25, 7
 794:	3e f4       	brtc	.+14     	; 0x7a4 <__floatsisf+0x12>
 796:	90 95       	com	r25
 798:	80 95       	com	r24
 79a:	70 95       	com	r23
 79c:	61 95       	neg	r22
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	99 23       	and	r25, r25
 7a6:	a9 f0       	breq	.+42     	; 0x7d2 <__floatsisf+0x40>
 7a8:	f9 2f       	mov	r31, r25
 7aa:	96 e9       	ldi	r25, 0x96	; 150
 7ac:	bb 27       	eor	r27, r27
 7ae:	93 95       	inc	r25
 7b0:	f6 95       	lsr	r31
 7b2:	87 95       	ror	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b7 95       	ror	r27
 7ba:	f1 11       	cpse	r31, r1
 7bc:	f8 cf       	rjmp	.-16     	; 0x7ae <__floatsisf+0x1c>
 7be:	fa f4       	brpl	.+62     	; 0x7fe <__floatsisf+0x6c>
 7c0:	bb 0f       	add	r27, r27
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <__floatsisf+0x36>
 7c4:	60 ff       	sbrs	r22, 0
 7c6:	1b c0       	rjmp	.+54     	; 0x7fe <__floatsisf+0x6c>
 7c8:	6f 5f       	subi	r22, 0xFF	; 255
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	16 c0       	rjmp	.+44     	; 0x7fe <__floatsisf+0x6c>
 7d2:	88 23       	and	r24, r24
 7d4:	11 f0       	breq	.+4      	; 0x7da <__floatsisf+0x48>
 7d6:	96 e9       	ldi	r25, 0x96	; 150
 7d8:	11 c0       	rjmp	.+34     	; 0x7fc <__floatsisf+0x6a>
 7da:	77 23       	and	r23, r23
 7dc:	21 f0       	breq	.+8      	; 0x7e6 <__floatsisf+0x54>
 7de:	9e e8       	ldi	r25, 0x8E	; 142
 7e0:	87 2f       	mov	r24, r23
 7e2:	76 2f       	mov	r23, r22
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <__floatsisf+0x5e>
 7e6:	66 23       	and	r22, r22
 7e8:	71 f0       	breq	.+28     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ea:	96 e8       	ldi	r25, 0x86	; 134
 7ec:	86 2f       	mov	r24, r22
 7ee:	70 e0       	ldi	r23, 0x00	; 0
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	2a f0       	brmi	.+10     	; 0x7fe <__floatsisf+0x6c>
 7f4:	9a 95       	dec	r25
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	da f7       	brpl	.-10     	; 0x7f4 <__floatsisf+0x62>
 7fe:	88 0f       	add	r24, r24
 800:	96 95       	lsr	r25
 802:	87 95       	ror	r24
 804:	97 f9       	bld	r25, 7
 806:	08 95       	ret

00000808 <__fp_inf>:
 808:	97 f9       	bld	r25, 7
 80a:	9f 67       	ori	r25, 0x7F	; 127
 80c:	80 e8       	ldi	r24, 0x80	; 128
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	08 95       	ret

00000814 <__fp_nan>:
 814:	9f ef       	ldi	r25, 0xFF	; 255
 816:	80 ec       	ldi	r24, 0xC0	; 192
 818:	08 95       	ret

0000081a <__fp_pscA>:
 81a:	00 24       	eor	r0, r0
 81c:	0a 94       	dec	r0
 81e:	16 16       	cp	r1, r22
 820:	17 06       	cpc	r1, r23
 822:	18 06       	cpc	r1, r24
 824:	09 06       	cpc	r0, r25
 826:	08 95       	ret

00000828 <__fp_pscB>:
 828:	00 24       	eor	r0, r0
 82a:	0a 94       	dec	r0
 82c:	12 16       	cp	r1, r18
 82e:	13 06       	cpc	r1, r19
 830:	14 06       	cpc	r1, r20
 832:	05 06       	cpc	r0, r21
 834:	08 95       	ret

00000836 <__fp_round>:
 836:	09 2e       	mov	r0, r25
 838:	03 94       	inc	r0
 83a:	00 0c       	add	r0, r0
 83c:	11 f4       	brne	.+4      	; 0x842 <__fp_round+0xc>
 83e:	88 23       	and	r24, r24
 840:	52 f0       	brmi	.+20     	; 0x856 <__fp_round+0x20>
 842:	bb 0f       	add	r27, r27
 844:	40 f4       	brcc	.+16     	; 0x856 <__fp_round+0x20>
 846:	bf 2b       	or	r27, r31
 848:	11 f4       	brne	.+4      	; 0x84e <__fp_round+0x18>
 84a:	60 ff       	sbrs	r22, 0
 84c:	04 c0       	rjmp	.+8      	; 0x856 <__fp_round+0x20>
 84e:	6f 5f       	subi	r22, 0xFF	; 255
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	8f 4f       	sbci	r24, 0xFF	; 255
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	08 95       	ret

00000858 <__fp_split3>:
 858:	57 fd       	sbrc	r21, 7
 85a:	90 58       	subi	r25, 0x80	; 128
 85c:	44 0f       	add	r20, r20
 85e:	55 1f       	adc	r21, r21
 860:	59 f0       	breq	.+22     	; 0x878 <__fp_splitA+0x10>
 862:	5f 3f       	cpi	r21, 0xFF	; 255
 864:	71 f0       	breq	.+28     	; 0x882 <__fp_splitA+0x1a>
 866:	47 95       	ror	r20

00000868 <__fp_splitA>:
 868:	88 0f       	add	r24, r24
 86a:	97 fb       	bst	r25, 7
 86c:	99 1f       	adc	r25, r25
 86e:	61 f0       	breq	.+24     	; 0x888 <__fp_splitA+0x20>
 870:	9f 3f       	cpi	r25, 0xFF	; 255
 872:	79 f0       	breq	.+30     	; 0x892 <__fp_splitA+0x2a>
 874:	87 95       	ror	r24
 876:	08 95       	ret
 878:	12 16       	cp	r1, r18
 87a:	13 06       	cpc	r1, r19
 87c:	14 06       	cpc	r1, r20
 87e:	55 1f       	adc	r21, r21
 880:	f2 cf       	rjmp	.-28     	; 0x866 <__fp_split3+0xe>
 882:	46 95       	lsr	r20
 884:	f1 df       	rcall	.-30     	; 0x868 <__fp_splitA>
 886:	08 c0       	rjmp	.+16     	; 0x898 <__fp_splitA+0x30>
 888:	16 16       	cp	r1, r22
 88a:	17 06       	cpc	r1, r23
 88c:	18 06       	cpc	r1, r24
 88e:	99 1f       	adc	r25, r25
 890:	f1 cf       	rjmp	.-30     	; 0x874 <__fp_splitA+0xc>
 892:	86 95       	lsr	r24
 894:	71 05       	cpc	r23, r1
 896:	61 05       	cpc	r22, r1
 898:	08 94       	sec
 89a:	08 95       	ret

0000089c <__fp_zero>:
 89c:	e8 94       	clt

0000089e <__fp_szero>:
 89e:	bb 27       	eor	r27, r27
 8a0:	66 27       	eor	r22, r22
 8a2:	77 27       	eor	r23, r23
 8a4:	cb 01       	movw	r24, r22
 8a6:	97 f9       	bld	r25, 7
 8a8:	08 95       	ret

000008aa <dtostrf>:
 8aa:	ef 92       	push	r14
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	e8 01       	movw	r28, r16
 8b6:	47 fd       	sbrc	r20, 7
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <dtostrf+0x14>
 8ba:	34 e0       	ldi	r19, 0x04	; 4
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <dtostrf+0x16>
 8be:	34 e1       	ldi	r19, 0x14	; 20
 8c0:	04 2e       	mov	r0, r20
 8c2:	00 0c       	add	r0, r0
 8c4:	55 0b       	sbc	r21, r21
 8c6:	57 ff       	sbrs	r21, 7
 8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <dtostrf+0x26>
 8ca:	51 95       	neg	r21
 8cc:	41 95       	neg	r20
 8ce:	51 09       	sbc	r21, r1
 8d0:	e3 2e       	mov	r14, r19
 8d2:	02 2f       	mov	r16, r18
 8d4:	24 2f       	mov	r18, r20
 8d6:	ae 01       	movw	r20, r28
 8d8:	0e 94 75 04 	call	0x8ea	; 0x8ea <dtoa_prf>
 8dc:	ce 01       	movw	r24, r28
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	1f 91       	pop	r17
 8e4:	0f 91       	pop	r16
 8e6:	ef 90       	pop	r14
 8e8:	08 95       	ret

000008ea <dtoa_prf>:
 8ea:	a9 e0       	ldi	r26, 0x09	; 9
 8ec:	b0 e0       	ldi	r27, 0x00	; 0
 8ee:	eb e7       	ldi	r30, 0x7B	; 123
 8f0:	f4 e0       	ldi	r31, 0x04	; 4
 8f2:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__prologue_saves__+0xc>
 8f6:	6a 01       	movw	r12, r20
 8f8:	12 2f       	mov	r17, r18
 8fa:	b0 2e       	mov	r11, r16
 8fc:	2b e3       	ldi	r18, 0x3B	; 59
 8fe:	20 17       	cp	r18, r16
 900:	20 f0       	brcs	.+8      	; 0x90a <__stack+0xb>
 902:	ff 24       	eor	r15, r15
 904:	f3 94       	inc	r15
 906:	f0 0e       	add	r15, r16
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
 90a:	2c e3       	ldi	r18, 0x3C	; 60
 90c:	f2 2e       	mov	r15, r18
 90e:	0f 2d       	mov	r16, r15
 910:	27 e0       	ldi	r18, 0x07	; 7
 912:	ae 01       	movw	r20, r28
 914:	4f 5f       	subi	r20, 0xFF	; 255
 916:	5f 4f       	sbci	r21, 0xFF	; 255
 918:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ftoa_engine>
 91c:	bc 01       	movw	r22, r24
 91e:	49 81       	ldd	r20, Y+1	; 0x01
 920:	84 2f       	mov	r24, r20
 922:	89 70       	andi	r24, 0x09	; 9
 924:	81 30       	cpi	r24, 0x01	; 1
 926:	31 f0       	breq	.+12     	; 0x934 <__stack+0x35>
 928:	e1 fc       	sbrc	r14, 1
 92a:	06 c0       	rjmp	.+12     	; 0x938 <__stack+0x39>
 92c:	e0 fe       	sbrs	r14, 0
 92e:	06 c0       	rjmp	.+12     	; 0x93c <__stack+0x3d>
 930:	90 e2       	ldi	r25, 0x20	; 32
 932:	05 c0       	rjmp	.+10     	; 0x93e <__stack+0x3f>
 934:	9d e2       	ldi	r25, 0x2D	; 45
 936:	03 c0       	rjmp	.+6      	; 0x93e <__stack+0x3f>
 938:	9b e2       	ldi	r25, 0x2B	; 43
 93a:	01 c0       	rjmp	.+2      	; 0x93e <__stack+0x3f>
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	5e 2d       	mov	r21, r14
 940:	50 71       	andi	r21, 0x10	; 16
 942:	43 ff       	sbrs	r20, 3
 944:	3c c0       	rjmp	.+120    	; 0x9be <__stack+0xbf>
 946:	91 11       	cpse	r25, r1
 948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0x4f>
 94a:	83 e0       	ldi	r24, 0x03	; 3
 94c:	01 c0       	rjmp	.+2      	; 0x950 <__stack+0x51>
 94e:	84 e0       	ldi	r24, 0x04	; 4
 950:	81 17       	cp	r24, r17
 952:	18 f4       	brcc	.+6      	; 0x95a <__stack+0x5b>
 954:	21 2f       	mov	r18, r17
 956:	28 1b       	sub	r18, r24
 958:	01 c0       	rjmp	.+2      	; 0x95c <__stack+0x5d>
 95a:	20 e0       	ldi	r18, 0x00	; 0
 95c:	51 11       	cpse	r21, r1
 95e:	0b c0       	rjmp	.+22     	; 0x976 <__stack+0x77>
 960:	f6 01       	movw	r30, r12
 962:	82 2f       	mov	r24, r18
 964:	30 e2       	ldi	r19, 0x20	; 32
 966:	88 23       	and	r24, r24
 968:	19 f0       	breq	.+6      	; 0x970 <__stack+0x71>
 96a:	31 93       	st	Z+, r19
 96c:	81 50       	subi	r24, 0x01	; 1
 96e:	fb cf       	rjmp	.-10     	; 0x966 <__stack+0x67>
 970:	c2 0e       	add	r12, r18
 972:	d1 1c       	adc	r13, r1
 974:	20 e0       	ldi	r18, 0x00	; 0
 976:	99 23       	and	r25, r25
 978:	29 f0       	breq	.+10     	; 0x984 <__stack+0x85>
 97a:	d6 01       	movw	r26, r12
 97c:	9c 93       	st	X, r25
 97e:	f6 01       	movw	r30, r12
 980:	31 96       	adiw	r30, 0x01	; 1
 982:	6f 01       	movw	r12, r30
 984:	c6 01       	movw	r24, r12
 986:	03 96       	adiw	r24, 0x03	; 3
 988:	e2 fe       	sbrs	r14, 2
 98a:	0a c0       	rjmp	.+20     	; 0x9a0 <__stack+0xa1>
 98c:	3e e4       	ldi	r19, 0x4E	; 78
 98e:	d6 01       	movw	r26, r12
 990:	3c 93       	st	X, r19
 992:	41 e4       	ldi	r20, 0x41	; 65
 994:	11 96       	adiw	r26, 0x01	; 1
 996:	4c 93       	st	X, r20
 998:	11 97       	sbiw	r26, 0x01	; 1
 99a:	12 96       	adiw	r26, 0x02	; 2
 99c:	3c 93       	st	X, r19
 99e:	06 c0       	rjmp	.+12     	; 0x9ac <__stack+0xad>
 9a0:	3e e6       	ldi	r19, 0x6E	; 110
 9a2:	f6 01       	movw	r30, r12
 9a4:	30 83       	st	Z, r19
 9a6:	41 e6       	ldi	r20, 0x61	; 97
 9a8:	41 83       	std	Z+1, r20	; 0x01
 9aa:	32 83       	std	Z+2, r19	; 0x02
 9ac:	fc 01       	movw	r30, r24
 9ae:	32 2f       	mov	r19, r18
 9b0:	40 e2       	ldi	r20, 0x20	; 32
 9b2:	33 23       	and	r19, r19
 9b4:	09 f4       	brne	.+2      	; 0x9b8 <__stack+0xb9>
 9b6:	42 c0       	rjmp	.+132    	; 0xa3c <__stack+0x13d>
 9b8:	41 93       	st	Z+, r20
 9ba:	31 50       	subi	r19, 0x01	; 1
 9bc:	fa cf       	rjmp	.-12     	; 0x9b2 <__stack+0xb3>
 9be:	42 ff       	sbrs	r20, 2
 9c0:	44 c0       	rjmp	.+136    	; 0xa4a <__stack+0x14b>
 9c2:	91 11       	cpse	r25, r1
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__stack+0xcb>
 9c6:	83 e0       	ldi	r24, 0x03	; 3
 9c8:	01 c0       	rjmp	.+2      	; 0x9cc <__stack+0xcd>
 9ca:	84 e0       	ldi	r24, 0x04	; 4
 9cc:	81 17       	cp	r24, r17
 9ce:	18 f4       	brcc	.+6      	; 0x9d6 <__stack+0xd7>
 9d0:	21 2f       	mov	r18, r17
 9d2:	28 1b       	sub	r18, r24
 9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <__stack+0xd9>
 9d6:	20 e0       	ldi	r18, 0x00	; 0
 9d8:	51 11       	cpse	r21, r1
 9da:	0b c0       	rjmp	.+22     	; 0x9f2 <__stack+0xf3>
 9dc:	f6 01       	movw	r30, r12
 9de:	82 2f       	mov	r24, r18
 9e0:	30 e2       	ldi	r19, 0x20	; 32
 9e2:	88 23       	and	r24, r24
 9e4:	19 f0       	breq	.+6      	; 0x9ec <__stack+0xed>
 9e6:	31 93       	st	Z+, r19
 9e8:	81 50       	subi	r24, 0x01	; 1
 9ea:	fb cf       	rjmp	.-10     	; 0x9e2 <__stack+0xe3>
 9ec:	c2 0e       	add	r12, r18
 9ee:	d1 1c       	adc	r13, r1
 9f0:	20 e0       	ldi	r18, 0x00	; 0
 9f2:	99 23       	and	r25, r25
 9f4:	29 f0       	breq	.+10     	; 0xa00 <__stack+0x101>
 9f6:	d6 01       	movw	r26, r12
 9f8:	9c 93       	st	X, r25
 9fa:	f6 01       	movw	r30, r12
 9fc:	31 96       	adiw	r30, 0x01	; 1
 9fe:	6f 01       	movw	r12, r30
 a00:	c6 01       	movw	r24, r12
 a02:	03 96       	adiw	r24, 0x03	; 3
 a04:	e2 fe       	sbrs	r14, 2
 a06:	0b c0       	rjmp	.+22     	; 0xa1e <__stack+0x11f>
 a08:	39 e4       	ldi	r19, 0x49	; 73
 a0a:	d6 01       	movw	r26, r12
 a0c:	3c 93       	st	X, r19
 a0e:	3e e4       	ldi	r19, 0x4E	; 78
 a10:	11 96       	adiw	r26, 0x01	; 1
 a12:	3c 93       	st	X, r19
 a14:	11 97       	sbiw	r26, 0x01	; 1
 a16:	36 e4       	ldi	r19, 0x46	; 70
 a18:	12 96       	adiw	r26, 0x02	; 2
 a1a:	3c 93       	st	X, r19
 a1c:	07 c0       	rjmp	.+14     	; 0xa2c <__stack+0x12d>
 a1e:	39 e6       	ldi	r19, 0x69	; 105
 a20:	f6 01       	movw	r30, r12
 a22:	30 83       	st	Z, r19
 a24:	3e e6       	ldi	r19, 0x6E	; 110
 a26:	31 83       	std	Z+1, r19	; 0x01
 a28:	36 e6       	ldi	r19, 0x66	; 102
 a2a:	32 83       	std	Z+2, r19	; 0x02
 a2c:	fc 01       	movw	r30, r24
 a2e:	32 2f       	mov	r19, r18
 a30:	40 e2       	ldi	r20, 0x20	; 32
 a32:	33 23       	and	r19, r19
 a34:	19 f0       	breq	.+6      	; 0xa3c <__stack+0x13d>
 a36:	41 93       	st	Z+, r20
 a38:	31 50       	subi	r19, 0x01	; 1
 a3a:	fb cf       	rjmp	.-10     	; 0xa32 <__stack+0x133>
 a3c:	fc 01       	movw	r30, r24
 a3e:	e2 0f       	add	r30, r18
 a40:	f1 1d       	adc	r31, r1
 a42:	10 82       	st	Z, r1
 a44:	8e ef       	ldi	r24, 0xFE	; 254
 a46:	9f ef       	ldi	r25, 0xFF	; 255
 a48:	a6 c0       	rjmp	.+332    	; 0xb96 <__stack+0x297>
 a4a:	21 e0       	ldi	r18, 0x01	; 1
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	91 11       	cpse	r25, r1
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <__stack+0x157>
 a52:	20 e0       	ldi	r18, 0x00	; 0
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	16 16       	cp	r1, r22
 a58:	17 06       	cpc	r1, r23
 a5a:	1c f4       	brge	.+6      	; 0xa62 <__stack+0x163>
 a5c:	fb 01       	movw	r30, r22
 a5e:	31 96       	adiw	r30, 0x01	; 1
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <__stack+0x167>
 a62:	e1 e0       	ldi	r30, 0x01	; 1
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	2e 0f       	add	r18, r30
 a68:	3f 1f       	adc	r19, r31
 a6a:	bb 20       	and	r11, r11
 a6c:	21 f0       	breq	.+8      	; 0xa76 <__stack+0x177>
 a6e:	eb 2d       	mov	r30, r11
 a70:	f0 e0       	ldi	r31, 0x00	; 0
 a72:	31 96       	adiw	r30, 0x01	; 1
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <__stack+0x17b>
 a76:	e0 e0       	ldi	r30, 0x00	; 0
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	2e 0f       	add	r18, r30
 a7c:	3f 1f       	adc	r19, r31
 a7e:	e1 2f       	mov	r30, r17
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	2e 17       	cp	r18, r30
 a84:	3f 07       	cpc	r19, r31
 a86:	1c f4       	brge	.+6      	; 0xa8e <__stack+0x18f>
 a88:	12 1b       	sub	r17, r18
 a8a:	21 2f       	mov	r18, r17
 a8c:	01 c0       	rjmp	.+2      	; 0xa90 <__stack+0x191>
 a8e:	20 e0       	ldi	r18, 0x00	; 0
 a90:	8e 2d       	mov	r24, r14
 a92:	88 71       	andi	r24, 0x18	; 24
 a94:	59 f4       	brne	.+22     	; 0xaac <__stack+0x1ad>
 a96:	f6 01       	movw	r30, r12
 a98:	82 2f       	mov	r24, r18
 a9a:	30 e2       	ldi	r19, 0x20	; 32
 a9c:	88 23       	and	r24, r24
 a9e:	19 f0       	breq	.+6      	; 0xaa6 <__stack+0x1a7>
 aa0:	31 93       	st	Z+, r19
 aa2:	81 50       	subi	r24, 0x01	; 1
 aa4:	fb cf       	rjmp	.-10     	; 0xa9c <__stack+0x19d>
 aa6:	c2 0e       	add	r12, r18
 aa8:	d1 1c       	adc	r13, r1
 aaa:	20 e0       	ldi	r18, 0x00	; 0
 aac:	99 23       	and	r25, r25
 aae:	29 f0       	breq	.+10     	; 0xaba <__stack+0x1bb>
 ab0:	d6 01       	movw	r26, r12
 ab2:	9c 93       	st	X, r25
 ab4:	f6 01       	movw	r30, r12
 ab6:	31 96       	adiw	r30, 0x01	; 1
 ab8:	6f 01       	movw	r12, r30
 aba:	51 11       	cpse	r21, r1
 abc:	0b c0       	rjmp	.+22     	; 0xad4 <__stack+0x1d5>
 abe:	f6 01       	movw	r30, r12
 ac0:	82 2f       	mov	r24, r18
 ac2:	90 e3       	ldi	r25, 0x30	; 48
 ac4:	88 23       	and	r24, r24
 ac6:	19 f0       	breq	.+6      	; 0xace <__stack+0x1cf>
 ac8:	91 93       	st	Z+, r25
 aca:	81 50       	subi	r24, 0x01	; 1
 acc:	fb cf       	rjmp	.-10     	; 0xac4 <__stack+0x1c5>
 ace:	c2 0e       	add	r12, r18
 ad0:	d1 1c       	adc	r13, r1
 ad2:	20 e0       	ldi	r18, 0x00	; 0
 ad4:	0f 2d       	mov	r16, r15
 ad6:	06 0f       	add	r16, r22
 ad8:	9a 81       	ldd	r25, Y+2	; 0x02
 ada:	34 2f       	mov	r19, r20
 adc:	30 71       	andi	r19, 0x10	; 16
 ade:	44 ff       	sbrs	r20, 4
 ae0:	03 c0       	rjmp	.+6      	; 0xae8 <__stack+0x1e9>
 ae2:	91 33       	cpi	r25, 0x31	; 49
 ae4:	09 f4       	brne	.+2      	; 0xae8 <__stack+0x1e9>
 ae6:	01 50       	subi	r16, 0x01	; 1
 ae8:	10 16       	cp	r1, r16
 aea:	24 f4       	brge	.+8      	; 0xaf4 <__stack+0x1f5>
 aec:	09 30       	cpi	r16, 0x09	; 9
 aee:	18 f0       	brcs	.+6      	; 0xaf6 <__stack+0x1f7>
 af0:	08 e0       	ldi	r16, 0x08	; 8
 af2:	01 c0       	rjmp	.+2      	; 0xaf6 <__stack+0x1f7>
 af4:	01 e0       	ldi	r16, 0x01	; 1
 af6:	ab 01       	movw	r20, r22
 af8:	77 ff       	sbrs	r23, 7
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <__stack+0x201>
 afc:	40 e0       	ldi	r20, 0x00	; 0
 afe:	50 e0       	ldi	r21, 0x00	; 0
 b00:	fb 01       	movw	r30, r22
 b02:	e4 1b       	sub	r30, r20
 b04:	f5 0b       	sbc	r31, r21
 b06:	a1 e0       	ldi	r26, 0x01	; 1
 b08:	b0 e0       	ldi	r27, 0x00	; 0
 b0a:	ac 0f       	add	r26, r28
 b0c:	bd 1f       	adc	r27, r29
 b0e:	ea 0f       	add	r30, r26
 b10:	fb 1f       	adc	r31, r27
 b12:	8e e2       	ldi	r24, 0x2E	; 46
 b14:	a8 2e       	mov	r10, r24
 b16:	4b 01       	movw	r8, r22
 b18:	80 1a       	sub	r8, r16
 b1a:	91 08       	sbc	r9, r1
 b1c:	0b 2d       	mov	r16, r11
 b1e:	10 e0       	ldi	r17, 0x00	; 0
 b20:	11 95       	neg	r17
 b22:	01 95       	neg	r16
 b24:	11 09       	sbc	r17, r1
 b26:	4f 3f       	cpi	r20, 0xFF	; 255
 b28:	bf ef       	ldi	r27, 0xFF	; 255
 b2a:	5b 07       	cpc	r21, r27
 b2c:	21 f4       	brne	.+8      	; 0xb36 <__stack+0x237>
 b2e:	d6 01       	movw	r26, r12
 b30:	ac 92       	st	X, r10
 b32:	11 96       	adiw	r26, 0x01	; 1
 b34:	6d 01       	movw	r12, r26
 b36:	64 17       	cp	r22, r20
 b38:	75 07       	cpc	r23, r21
 b3a:	2c f0       	brlt	.+10     	; 0xb46 <__stack+0x247>
 b3c:	84 16       	cp	r8, r20
 b3e:	95 06       	cpc	r9, r21
 b40:	14 f4       	brge	.+4      	; 0xb46 <__stack+0x247>
 b42:	81 81       	ldd	r24, Z+1	; 0x01
 b44:	01 c0       	rjmp	.+2      	; 0xb48 <__stack+0x249>
 b46:	80 e3       	ldi	r24, 0x30	; 48
 b48:	41 50       	subi	r20, 0x01	; 1
 b4a:	51 09       	sbc	r21, r1
 b4c:	31 96       	adiw	r30, 0x01	; 1
 b4e:	d6 01       	movw	r26, r12
 b50:	11 96       	adiw	r26, 0x01	; 1
 b52:	7d 01       	movw	r14, r26
 b54:	40 17       	cp	r20, r16
 b56:	51 07       	cpc	r21, r17
 b58:	24 f0       	brlt	.+8      	; 0xb62 <__stack+0x263>
 b5a:	d6 01       	movw	r26, r12
 b5c:	8c 93       	st	X, r24
 b5e:	67 01       	movw	r12, r14
 b60:	e2 cf       	rjmp	.-60     	; 0xb26 <__stack+0x227>
 b62:	64 17       	cp	r22, r20
 b64:	75 07       	cpc	r23, r21
 b66:	39 f4       	brne	.+14     	; 0xb76 <__stack+0x277>
 b68:	96 33       	cpi	r25, 0x36	; 54
 b6a:	20 f4       	brcc	.+8      	; 0xb74 <__stack+0x275>
 b6c:	95 33       	cpi	r25, 0x35	; 53
 b6e:	19 f4       	brne	.+6      	; 0xb76 <__stack+0x277>
 b70:	31 11       	cpse	r19, r1
 b72:	01 c0       	rjmp	.+2      	; 0xb76 <__stack+0x277>
 b74:	81 e3       	ldi	r24, 0x31	; 49
 b76:	f6 01       	movw	r30, r12
 b78:	80 83       	st	Z, r24
 b7a:	f7 01       	movw	r30, r14
 b7c:	82 2f       	mov	r24, r18
 b7e:	90 e2       	ldi	r25, 0x20	; 32
 b80:	88 23       	and	r24, r24
 b82:	19 f0       	breq	.+6      	; 0xb8a <__stack+0x28b>
 b84:	91 93       	st	Z+, r25
 b86:	81 50       	subi	r24, 0x01	; 1
 b88:	fb cf       	rjmp	.-10     	; 0xb80 <__stack+0x281>
 b8a:	f7 01       	movw	r30, r14
 b8c:	e2 0f       	add	r30, r18
 b8e:	f1 1d       	adc	r31, r1
 b90:	10 82       	st	Z, r1
 b92:	80 e0       	ldi	r24, 0x00	; 0
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	29 96       	adiw	r28, 0x09	; 9
 b98:	ec e0       	ldi	r30, 0x0C	; 12
 b9a:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__epilogue_restores__+0xc>

00000b9e <__ftoa_engine>:
 b9e:	28 30       	cpi	r18, 0x08	; 8
 ba0:	08 f0       	brcs	.+2      	; 0xba4 <__ftoa_engine+0x6>
 ba2:	27 e0       	ldi	r18, 0x07	; 7
 ba4:	33 27       	eor	r19, r19
 ba6:	da 01       	movw	r26, r20
 ba8:	99 0f       	add	r25, r25
 baa:	31 1d       	adc	r19, r1
 bac:	87 fd       	sbrc	r24, 7
 bae:	91 60       	ori	r25, 0x01	; 1
 bb0:	00 96       	adiw	r24, 0x00	; 0
 bb2:	61 05       	cpc	r22, r1
 bb4:	71 05       	cpc	r23, r1
 bb6:	39 f4       	brne	.+14     	; 0xbc6 <__ftoa_engine+0x28>
 bb8:	32 60       	ori	r19, 0x02	; 2
 bba:	2e 5f       	subi	r18, 0xFE	; 254
 bbc:	3d 93       	st	X+, r19
 bbe:	30 e3       	ldi	r19, 0x30	; 48
 bc0:	2a 95       	dec	r18
 bc2:	e1 f7       	brne	.-8      	; 0xbbc <__ftoa_engine+0x1e>
 bc4:	08 95       	ret
 bc6:	9f 3f       	cpi	r25, 0xFF	; 255
 bc8:	30 f0       	brcs	.+12     	; 0xbd6 <__ftoa_engine+0x38>
 bca:	80 38       	cpi	r24, 0x80	; 128
 bcc:	71 05       	cpc	r23, r1
 bce:	61 05       	cpc	r22, r1
 bd0:	09 f0       	breq	.+2      	; 0xbd4 <__ftoa_engine+0x36>
 bd2:	3c 5f       	subi	r19, 0xFC	; 252
 bd4:	3c 5f       	subi	r19, 0xFC	; 252
 bd6:	3d 93       	st	X+, r19
 bd8:	91 30       	cpi	r25, 0x01	; 1
 bda:	08 f0       	brcs	.+2      	; 0xbde <__ftoa_engine+0x40>
 bdc:	80 68       	ori	r24, 0x80	; 128
 bde:	91 1d       	adc	r25, r1
 be0:	df 93       	push	r29
 be2:	cf 93       	push	r28
 be4:	1f 93       	push	r17
 be6:	0f 93       	push	r16
 be8:	ff 92       	push	r15
 bea:	ef 92       	push	r14
 bec:	19 2f       	mov	r17, r25
 bee:	98 7f       	andi	r25, 0xF8	; 248
 bf0:	96 95       	lsr	r25
 bf2:	e9 2f       	mov	r30, r25
 bf4:	96 95       	lsr	r25
 bf6:	96 95       	lsr	r25
 bf8:	e9 0f       	add	r30, r25
 bfa:	ff 27       	eor	r31, r31
 bfc:	ee 53       	subi	r30, 0x3E	; 62
 bfe:	ff 4f       	sbci	r31, 0xFF	; 255
 c00:	99 27       	eor	r25, r25
 c02:	33 27       	eor	r19, r19
 c04:	ee 24       	eor	r14, r14
 c06:	ff 24       	eor	r15, r15
 c08:	a7 01       	movw	r20, r14
 c0a:	e7 01       	movw	r28, r14
 c0c:	05 90       	lpm	r0, Z+
 c0e:	08 94       	sec
 c10:	07 94       	ror	r0
 c12:	28 f4       	brcc	.+10     	; 0xc1e <__ftoa_engine+0x80>
 c14:	36 0f       	add	r19, r22
 c16:	e7 1e       	adc	r14, r23
 c18:	f8 1e       	adc	r15, r24
 c1a:	49 1f       	adc	r20, r25
 c1c:	51 1d       	adc	r21, r1
 c1e:	66 0f       	add	r22, r22
 c20:	77 1f       	adc	r23, r23
 c22:	88 1f       	adc	r24, r24
 c24:	99 1f       	adc	r25, r25
 c26:	06 94       	lsr	r0
 c28:	a1 f7       	brne	.-24     	; 0xc12 <__ftoa_engine+0x74>
 c2a:	05 90       	lpm	r0, Z+
 c2c:	07 94       	ror	r0
 c2e:	28 f4       	brcc	.+10     	; 0xc3a <__ftoa_engine+0x9c>
 c30:	e7 0e       	add	r14, r23
 c32:	f8 1e       	adc	r15, r24
 c34:	49 1f       	adc	r20, r25
 c36:	56 1f       	adc	r21, r22
 c38:	c1 1d       	adc	r28, r1
 c3a:	77 0f       	add	r23, r23
 c3c:	88 1f       	adc	r24, r24
 c3e:	99 1f       	adc	r25, r25
 c40:	66 1f       	adc	r22, r22
 c42:	06 94       	lsr	r0
 c44:	a1 f7       	brne	.-24     	; 0xc2e <__ftoa_engine+0x90>
 c46:	05 90       	lpm	r0, Z+
 c48:	07 94       	ror	r0
 c4a:	28 f4       	brcc	.+10     	; 0xc56 <__ftoa_engine+0xb8>
 c4c:	f8 0e       	add	r15, r24
 c4e:	49 1f       	adc	r20, r25
 c50:	56 1f       	adc	r21, r22
 c52:	c7 1f       	adc	r28, r23
 c54:	d1 1d       	adc	r29, r1
 c56:	88 0f       	add	r24, r24
 c58:	99 1f       	adc	r25, r25
 c5a:	66 1f       	adc	r22, r22
 c5c:	77 1f       	adc	r23, r23
 c5e:	06 94       	lsr	r0
 c60:	a1 f7       	brne	.-24     	; 0xc4a <__ftoa_engine+0xac>
 c62:	05 90       	lpm	r0, Z+
 c64:	07 94       	ror	r0
 c66:	20 f4       	brcc	.+8      	; 0xc70 <__ftoa_engine+0xd2>
 c68:	49 0f       	add	r20, r25
 c6a:	56 1f       	adc	r21, r22
 c6c:	c7 1f       	adc	r28, r23
 c6e:	d8 1f       	adc	r29, r24
 c70:	99 0f       	add	r25, r25
 c72:	66 1f       	adc	r22, r22
 c74:	77 1f       	adc	r23, r23
 c76:	88 1f       	adc	r24, r24
 c78:	06 94       	lsr	r0
 c7a:	a9 f7       	brne	.-22     	; 0xc66 <__ftoa_engine+0xc8>
 c7c:	84 91       	lpm	r24, Z
 c7e:	10 95       	com	r17
 c80:	17 70       	andi	r17, 0x07	; 7
 c82:	41 f0       	breq	.+16     	; 0xc94 <__ftoa_engine+0xf6>
 c84:	d6 95       	lsr	r29
 c86:	c7 95       	ror	r28
 c88:	57 95       	ror	r21
 c8a:	47 95       	ror	r20
 c8c:	f7 94       	ror	r15
 c8e:	e7 94       	ror	r14
 c90:	1a 95       	dec	r17
 c92:	c1 f7       	brne	.-16     	; 0xc84 <__ftoa_engine+0xe6>
 c94:	e8 e6       	ldi	r30, 0x68	; 104
 c96:	f0 e0       	ldi	r31, 0x00	; 0
 c98:	68 94       	set
 c9a:	15 90       	lpm	r1, Z+
 c9c:	15 91       	lpm	r17, Z+
 c9e:	35 91       	lpm	r19, Z+
 ca0:	65 91       	lpm	r22, Z+
 ca2:	95 91       	lpm	r25, Z+
 ca4:	05 90       	lpm	r0, Z+
 ca6:	7f e2       	ldi	r23, 0x2F	; 47
 ca8:	73 95       	inc	r23
 caa:	e1 18       	sub	r14, r1
 cac:	f1 0a       	sbc	r15, r17
 cae:	43 0b       	sbc	r20, r19
 cb0:	56 0b       	sbc	r21, r22
 cb2:	c9 0b       	sbc	r28, r25
 cb4:	d0 09       	sbc	r29, r0
 cb6:	c0 f7       	brcc	.-16     	; 0xca8 <__ftoa_engine+0x10a>
 cb8:	e1 0c       	add	r14, r1
 cba:	f1 1e       	adc	r15, r17
 cbc:	43 1f       	adc	r20, r19
 cbe:	56 1f       	adc	r21, r22
 cc0:	c9 1f       	adc	r28, r25
 cc2:	d0 1d       	adc	r29, r0
 cc4:	7e f4       	brtc	.+30     	; 0xce4 <__ftoa_engine+0x146>
 cc6:	70 33       	cpi	r23, 0x30	; 48
 cc8:	11 f4       	brne	.+4      	; 0xcce <__ftoa_engine+0x130>
 cca:	8a 95       	dec	r24
 ccc:	e6 cf       	rjmp	.-52     	; 0xc9a <__ftoa_engine+0xfc>
 cce:	e8 94       	clt
 cd0:	01 50       	subi	r16, 0x01	; 1
 cd2:	30 f0       	brcs	.+12     	; 0xce0 <__ftoa_engine+0x142>
 cd4:	08 0f       	add	r16, r24
 cd6:	0a f4       	brpl	.+2      	; 0xcda <__ftoa_engine+0x13c>
 cd8:	00 27       	eor	r16, r16
 cda:	02 17       	cp	r16, r18
 cdc:	08 f4       	brcc	.+2      	; 0xce0 <__ftoa_engine+0x142>
 cde:	20 2f       	mov	r18, r16
 ce0:	23 95       	inc	r18
 ce2:	02 2f       	mov	r16, r18
 ce4:	7a 33       	cpi	r23, 0x3A	; 58
 ce6:	28 f0       	brcs	.+10     	; 0xcf2 <__ftoa_engine+0x154>
 ce8:	79 e3       	ldi	r23, 0x39	; 57
 cea:	7d 93       	st	X+, r23
 cec:	2a 95       	dec	r18
 cee:	e9 f7       	brne	.-6      	; 0xcea <__ftoa_engine+0x14c>
 cf0:	10 c0       	rjmp	.+32     	; 0xd12 <__ftoa_engine+0x174>
 cf2:	7d 93       	st	X+, r23
 cf4:	2a 95       	dec	r18
 cf6:	89 f6       	brne	.-94     	; 0xc9a <__ftoa_engine+0xfc>
 cf8:	06 94       	lsr	r0
 cfa:	97 95       	ror	r25
 cfc:	67 95       	ror	r22
 cfe:	37 95       	ror	r19
 d00:	17 95       	ror	r17
 d02:	17 94       	ror	r1
 d04:	e1 18       	sub	r14, r1
 d06:	f1 0a       	sbc	r15, r17
 d08:	43 0b       	sbc	r20, r19
 d0a:	56 0b       	sbc	r21, r22
 d0c:	c9 0b       	sbc	r28, r25
 d0e:	d0 09       	sbc	r29, r0
 d10:	98 f0       	brcs	.+38     	; 0xd38 <__ftoa_engine+0x19a>
 d12:	23 95       	inc	r18
 d14:	7e 91       	ld	r23, -X
 d16:	73 95       	inc	r23
 d18:	7a 33       	cpi	r23, 0x3A	; 58
 d1a:	08 f0       	brcs	.+2      	; 0xd1e <__ftoa_engine+0x180>
 d1c:	70 e3       	ldi	r23, 0x30	; 48
 d1e:	7c 93       	st	X, r23
 d20:	20 13       	cpse	r18, r16
 d22:	b8 f7       	brcc	.-18     	; 0xd12 <__ftoa_engine+0x174>
 d24:	7e 91       	ld	r23, -X
 d26:	70 61       	ori	r23, 0x10	; 16
 d28:	7d 93       	st	X+, r23
 d2a:	30 f0       	brcs	.+12     	; 0xd38 <__ftoa_engine+0x19a>
 d2c:	83 95       	inc	r24
 d2e:	71 e3       	ldi	r23, 0x31	; 49
 d30:	7d 93       	st	X+, r23
 d32:	70 e3       	ldi	r23, 0x30	; 48
 d34:	2a 95       	dec	r18
 d36:	e1 f7       	brne	.-8      	; 0xd30 <__ftoa_engine+0x192>
 d38:	11 24       	eor	r1, r1
 d3a:	ef 90       	pop	r14
 d3c:	ff 90       	pop	r15
 d3e:	0f 91       	pop	r16
 d40:	1f 91       	pop	r17
 d42:	cf 91       	pop	r28
 d44:	df 91       	pop	r29
 d46:	99 27       	eor	r25, r25
 d48:	87 fd       	sbrc	r24, 7
 d4a:	90 95       	com	r25
 d4c:	08 95       	ret

00000d4e <__prologue_saves__>:
 d4e:	2f 92       	push	r2
 d50:	3f 92       	push	r3
 d52:	4f 92       	push	r4
 d54:	5f 92       	push	r5
 d56:	6f 92       	push	r6
 d58:	7f 92       	push	r7
 d5a:	8f 92       	push	r8
 d5c:	9f 92       	push	r9
 d5e:	af 92       	push	r10
 d60:	bf 92       	push	r11
 d62:	cf 92       	push	r12
 d64:	df 92       	push	r13
 d66:	ef 92       	push	r14
 d68:	ff 92       	push	r15
 d6a:	0f 93       	push	r16
 d6c:	1f 93       	push	r17
 d6e:	cf 93       	push	r28
 d70:	df 93       	push	r29
 d72:	cd b7       	in	r28, 0x3d	; 61
 d74:	de b7       	in	r29, 0x3e	; 62
 d76:	ca 1b       	sub	r28, r26
 d78:	db 0b       	sbc	r29, r27
 d7a:	0f b6       	in	r0, 0x3f	; 63
 d7c:	f8 94       	cli
 d7e:	de bf       	out	0x3e, r29	; 62
 d80:	0f be       	out	0x3f, r0	; 63
 d82:	cd bf       	out	0x3d, r28	; 61
 d84:	09 94       	ijmp

00000d86 <__epilogue_restores__>:
 d86:	2a 88       	ldd	r2, Y+18	; 0x12
 d88:	39 88       	ldd	r3, Y+17	; 0x11
 d8a:	48 88       	ldd	r4, Y+16	; 0x10
 d8c:	5f 84       	ldd	r5, Y+15	; 0x0f
 d8e:	6e 84       	ldd	r6, Y+14	; 0x0e
 d90:	7d 84       	ldd	r7, Y+13	; 0x0d
 d92:	8c 84       	ldd	r8, Y+12	; 0x0c
 d94:	9b 84       	ldd	r9, Y+11	; 0x0b
 d96:	aa 84       	ldd	r10, Y+10	; 0x0a
 d98:	b9 84       	ldd	r11, Y+9	; 0x09
 d9a:	c8 84       	ldd	r12, Y+8	; 0x08
 d9c:	df 80       	ldd	r13, Y+7	; 0x07
 d9e:	ee 80       	ldd	r14, Y+6	; 0x06
 da0:	fd 80       	ldd	r15, Y+5	; 0x05
 da2:	0c 81       	ldd	r16, Y+4	; 0x04
 da4:	1b 81       	ldd	r17, Y+3	; 0x03
 da6:	aa 81       	ldd	r26, Y+2	; 0x02
 da8:	b9 81       	ldd	r27, Y+1	; 0x01
 daa:	ce 0f       	add	r28, r30
 dac:	d1 1d       	adc	r29, r1
 dae:	0f b6       	in	r0, 0x3f	; 63
 db0:	f8 94       	cli
 db2:	de bf       	out	0x3e, r29	; 62
 db4:	0f be       	out	0x3f, r0	; 63
 db6:	cd bf       	out	0x3d, r28	; 61
 db8:	ed 01       	movw	r28, r26
 dba:	08 95       	ret

00000dbc <_exit>:
 dbc:	f8 94       	cli

00000dbe <__stop_program>:
 dbe:	ff cf       	rjmp	.-2      	; 0xdbe <__stop_program>
