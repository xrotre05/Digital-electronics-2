
08-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000047a  0000050e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800122  00800122  00000530  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f8c  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ef  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000260c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000531  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bd  00000000  00000000  00002d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000032da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_18>
  4c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 36       	cpi	r26, 0x67	; 103
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 3b 02 	jmp	0x476	; 0x476 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 1f 01 	call	0x23e	; 0x23e <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 c9 01 	call	0x392	; 0x392 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_1s();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8c 7f       	andi	r24, 0xFC	; 252
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x28>

000000d0 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	00 d0       	rcall	.+0      	; 0xf8 <__vector_13+0x28>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 0x5c;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	90 e3       	ldi	r25, 0x30	; 48
 100:	9a 83       	std	Y+2, r25	; 0x02
 102:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	79 f0       	breq	.+30     	; 0x12a <__vector_13+0x5a>
 10c:	18 f4       	brcc	.+6      	; 0x114 <__vector_13+0x44>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	41 f0       	breq	.+16     	; 0x122 <__vector_13+0x52>
 112:	7d c0       	rjmp	.+250    	; 0x20e <__vector_13+0x13e>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	09 f4       	brne	.+2      	; 0x11a <__vector_13+0x4a>
 118:	3f c0       	rjmp	.+126    	; 0x198 <__vector_13+0xc8>
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	09 f4       	brne	.+2      	; 0x120 <__vector_13+0x50>
 11e:	73 c0       	rjmp	.+230    	; 0x206 <__vector_13+0x136>
 120:	76 c0       	rjmp	.+236    	; 0x20e <__vector_13+0x13e>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        state= STATE_HUMID;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        

        break;
 128:	75 c0       	rjmp	.+234    	; 0x214 <__vector_13+0x144>
    
    
    case STATE_HUMID:
        twi_start((addr<<1) + TWI_WRITE);
 12a:	88 eb       	ldi	r24, 0xB8	; 184
 12c:	0e 94 2e 01 	call	0x25c	; 0x25c <twi_start>
        //else{
        //uart_puts("1\n\r");               
        //}
        
        
        twi_write(0);
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 4c 01 	call	0x298	; 0x298 <twi_write>
        
        twi_start((addr<<1) + TWI_READ);
 136:	89 eb       	ldi	r24, 0xB9	; 185
 138:	0e 94 2e 01 	call	0x25c	; 0x25c <twi_start>
        
        uart_puts("\r\nHumidity:\r\n");
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 f7 01 	call	0x3ee	; 0x3ee <uart_puts>
        result=twi_read_ack();
 144:	0e 94 57 01 	call	0x2ae	; 0x2ae <twi_read_ack>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 148:	4a e0       	ldi	r20, 0x0A	; 10
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 06 02 	call	0x40c	; 0x40c <__itoa_ncheck>
        itoa(result,uart_string,10);
        uart_puts(uart_string);
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <uart_puts>
        uart_puts(".");
 15e:	8f e0       	ldi	r24, 0x0F	; 15
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 f7 01 	call	0x3ee	; 0x3ee <uart_puts>
        
        result=twi_read_nack();
 166:	0e 94 62 01 	call	0x2c4	; 0x2c4 <twi_read_nack>
 16a:	4a e0       	ldi	r20, 0x0A	; 10
 16c:	be 01       	movw	r22, r28
 16e:	6f 5f       	subi	r22, 0xFF	; 255
 170:	7f 4f       	sbci	r23, 0xFF	; 255
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 06 02 	call	0x40c	; 0x40c <__itoa_ncheck>
        itoa(result,uart_string,10);
        uart_puts(uart_string);
 178:	ce 01       	movw	r24, r28
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <uart_puts>
        uart_putc('\n');
 180:	8a e0       	ldi	r24, 0x0A	; 10
 182:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <uart_putc>
        uart_putc('\r');
 186:	8d e0       	ldi	r24, 0x0D	; 13
 188:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <uart_putc>
        
        
        twi_stop();
 18c:	0e 94 6d 01 	call	0x2da	; 0x2da <twi_stop>
        
        state=STATE_TEMP;
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        break;
 196:	3e c0       	rjmp	.+124    	; 0x214 <__vector_13+0x144>

    
    case STATE_TEMP:
       
       twi_start((addr<<1) + TWI_WRITE);
 198:	88 eb       	ldi	r24, 0xB8	; 184
 19a:	0e 94 2e 01 	call	0x25c	; 0x25c <twi_start>

       twi_write(2);
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 4c 01 	call	0x298	; 0x298 <twi_write>
       
       twi_start((addr<<1) + TWI_READ);
 1a4:	89 eb       	ldi	r24, 0xB9	; 185
 1a6:	0e 94 2e 01 	call	0x25c	; 0x25c <twi_start>
       
       
       uart_puts("\r\nTemperature:\r\n");
 1aa:	81 e1       	ldi	r24, 0x11	; 17
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 f7 01 	call	0x3ee	; 0x3ee <uart_puts>
       result=twi_read_ack();
 1b2:	0e 94 57 01 	call	0x2ae	; 0x2ae <twi_read_ack>
 1b6:	4a e0       	ldi	r20, 0x0A	; 10
 1b8:	be 01       	movw	r22, r28
 1ba:	6f 5f       	subi	r22, 0xFF	; 255
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 06 02 	call	0x40c	; 0x40c <__itoa_ncheck>
       itoa(result,uart_string,10);
       uart_puts(uart_string);
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <uart_puts>
       uart_puts(".");
 1cc:	8f e0       	ldi	r24, 0x0F	; 15
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <uart_puts>
       
       result=twi_read_nack();
 1d4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <twi_read_nack>
 1d8:	4a e0       	ldi	r20, 0x0A	; 10
 1da:	be 01       	movw	r22, r28
 1dc:	6f 5f       	subi	r22, 0xFF	; 255
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 06 02 	call	0x40c	; 0x40c <__itoa_ncheck>
       itoa(result,uart_string,10);
       uart_puts(uart_string);
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	0e 94 f7 01 	call	0x3ee	; 0x3ee <uart_puts>
       uart_putc('\n');
 1ee:	8a e0       	ldi	r24, 0x0A	; 10
 1f0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <uart_putc>
       uart_putc('\r');
 1f4:	8d e0       	ldi	r24, 0x0D	; 13
 1f6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <uart_putc>
       
       
       twi_stop();
 1fa:	0e 94 6d 01 	call	0x2da	; 0x2da <twi_stop>
       
       state=STATE_CHECK;
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

        break;
 204:	07 c0       	rjmp	.+14     	; 0x214 <__vector_13+0x144>


    case STATE_CHECK:
    
        state=STATE_IDLE;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    break;
 20c:	03 c0       	rjmp	.+6      	; 0x214 <__vector_13+0x144>
  
    default:
        state = STATE_IDLE;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        break;
    }
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 23e:	87 b1       	in	r24, 0x07	; 7
 240:	8f 7c       	andi	r24, 0xCF	; 207
 242:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 244:	88 b1       	in	r24, 0x08	; 8
 246:	80 63       	ori	r24, 0x30	; 48
 248:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 24a:	e9 eb       	ldi	r30, 0xB9	; 185
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	8c 7f       	andi	r24, 0xFC	; 252
 252:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 254:	88 e9       	ldi	r24, 0x98	; 152
 256:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 25a:	08 95       	ret

0000025c <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 25c:	94 ea       	ldi	r25, 0xA4	; 164
 25e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 262:	ec eb       	ldi	r30, 0xBC	; 188
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	90 81       	ld	r25, Z
 268:	99 23       	and	r25, r25
 26a:	ec f7       	brge	.-6      	; 0x266 <twi_start+0xa>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 26c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 270:	84 e8       	ldi	r24, 0x84	; 132
 272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & _BV(TWINT)) == 0);
 276:	ec eb       	ldi	r30, 0xBC	; 188
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	88 23       	and	r24, r24
 27e:	ec f7       	brge	.-6      	; 0x27a <twi_start+0x1e>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 280:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 284:	98 7f       	andi	r25, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 286:	98 31       	cpi	r25, 0x18	; 24
 288:	29 f0       	breq	.+10     	; 0x294 <twi_start+0x38>
    {
        return 0;   /* Slave device accessible */
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 34       	cpi	r25, 0x40	; 64
 28e:	19 f4       	brne	.+6      	; 0x296 <twi_start+0x3a>
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	08 95       	ret
 294:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 1;   /* Failed to access slave device */
    }
}
 296:	08 95       	ret

00000298 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 298:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = _BV(TWINT) | _BV(TWEN);
 29c:	84 e8       	ldi	r24, 0x84	; 132
 29e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 2a2:	ec eb       	ldi	r30, 0xBC	; 188
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	88 23       	and	r24, r24
 2aa:	ec f7       	brge	.-6      	; 0x2a6 <twi_write+0xe>
}
 2ac:	08 95       	ret

000002ae <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 2ae:	84 ec       	ldi	r24, 0xC4	; 196
 2b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 2b4:	ec eb       	ldi	r30, 0xBC	; 188
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	88 23       	and	r24, r24
 2bc:	ec f7       	brge	.-6      	; 0x2b8 <twi_read_ack+0xa>
    return (TWDR);
 2be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 2c2:	08 95       	ret

000002c4 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 2c4:	84 e8       	ldi	r24, 0x84	; 132
 2c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 2ca:	ec eb       	ldi	r30, 0xBC	; 188
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	88 23       	and	r24, r24
 2d2:	ec f7       	brge	.-6      	; 0x2ce <twi_read_nack+0xa>
    return (TWDR);
 2d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 2d8:	08 95       	ret

000002da <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 2da:	84 e9       	ldi	r24, 0x94	; 148
 2dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2e0:	08 95       	ret

000002e2 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
 2f6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 2fa:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2fe:	8c 71       	andi	r24, 0x1C	; 28
 300:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <UART_RxHead>
 304:	ef 5f       	subi	r30, 0xFF	; 255
 306:	ef 71       	andi	r30, 0x1F	; 31
 308:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_RxTail>
 30c:	e9 17       	cp	r30, r25
 30e:	39 f0       	breq	.+14     	; 0x31e <__vector_18+0x3c>
 310:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <UART_RxHead>
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	e9 5d       	subi	r30, 0xD9	; 217
 318:	fe 4f       	sbci	r31, 0xFE	; 254
 31a:	20 83       	st	Z, r18
 31c:	01 c0       	rjmp	.+2      	; 0x320 <__vector_18+0x3e>
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
 324:	89 2b       	or	r24, r25
 326:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_19>:
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
 350:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <UART_TxHead>
 354:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <UART_TxTail>
 358:	98 17       	cp	r25, r24
 35a:	69 f0       	breq	.+26     	; 0x376 <__vector_19+0x38>
 35c:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <UART_TxTail>
 360:	ef 5f       	subi	r30, 0xFF	; 255
 362:	ef 71       	andi	r30, 0x1F	; 31
 364:	e0 93 25 01 	sts	0x0125, r30	; 0x800125 <UART_TxTail>
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	e9 5b       	subi	r30, 0xB9	; 185
 36c:	fe 4f       	sbci	r31, 0xFE	; 254
 36e:	80 81       	ld	r24, Z
 370:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 374:	05 c0       	rjmp	.+10     	; 0x380 <__vector_19+0x42>
 376:	e1 ec       	ldi	r30, 0xC1	; 193
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	8f 7d       	andi	r24, 0xDF	; 223
 37e:	80 83       	st	Z, r24
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <uart_init>:
 392:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <UART_TxHead>
 396:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <UART_TxTail>
 39a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_RxHead>
 39e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_RxTail>
 3a2:	99 23       	and	r25, r25
 3a4:	1c f4       	brge	.+6      	; 0x3ac <uart_init+0x1a>
 3a6:	22 e0       	ldi	r18, 0x02	; 2
 3a8:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 3ac:	90 78       	andi	r25, 0x80	; 128
 3ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 3b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 3b6:	88 e9       	ldi	r24, 0x98	; 152
 3b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 3bc:	86 e0       	ldi	r24, 0x06	; 6
 3be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 3c2:	08 95       	ret

000003c4 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 3c4:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <UART_TxHead>
 3c8:	2f 5f       	subi	r18, 0xFF	; 255
 3ca:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 3cc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_TxTail>
 3d0:	29 17       	cp	r18, r25
 3d2:	e1 f3       	breq	.-8      	; 0x3cc <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 3d4:	e2 2f       	mov	r30, r18
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	e9 5b       	subi	r30, 0xB9	; 185
 3da:	fe 4f       	sbci	r31, 0xFE	; 254
 3dc:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 3de:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 3e2:	e1 ec       	ldi	r30, 0xC1	; 193
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	80 62       	ori	r24, 0x20	; 32
 3ea:	80 83       	st	Z, r24
 3ec:	08 95       	ret

000003ee <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	ec 01       	movw	r28, r24
    while (*s)
 3f4:	88 81       	ld	r24, Y
 3f6:	88 23       	and	r24, r24
 3f8:	31 f0       	breq	.+12     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fa:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 3fc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 400:	89 91       	ld	r24, Y+
 402:	81 11       	cpse	r24, r1
 404:	fb cf       	rjmp	.-10     	; 0x3fc <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <__itoa_ncheck>:
 40c:	bb 27       	eor	r27, r27
 40e:	4a 30       	cpi	r20, 0x0A	; 10
 410:	31 f4       	brne	.+12     	; 0x41e <__itoa_ncheck+0x12>
 412:	99 23       	and	r25, r25
 414:	22 f4       	brpl	.+8      	; 0x41e <__itoa_ncheck+0x12>
 416:	bd e2       	ldi	r27, 0x2D	; 45
 418:	90 95       	com	r25
 41a:	81 95       	neg	r24
 41c:	9f 4f       	sbci	r25, 0xFF	; 255
 41e:	0c 94 12 02 	jmp	0x424	; 0x424 <__utoa_common>

00000422 <__utoa_ncheck>:
 422:	bb 27       	eor	r27, r27

00000424 <__utoa_common>:
 424:	fb 01       	movw	r30, r22
 426:	55 27       	eor	r21, r21
 428:	aa 27       	eor	r26, r26
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	aa 1f       	adc	r26, r26
 430:	a4 17       	cp	r26, r20
 432:	10 f0       	brcs	.+4      	; 0x438 <__utoa_common+0x14>
 434:	a4 1b       	sub	r26, r20
 436:	83 95       	inc	r24
 438:	50 51       	subi	r21, 0x10	; 16
 43a:	b9 f7       	brne	.-18     	; 0x42a <__utoa_common+0x6>
 43c:	a0 5d       	subi	r26, 0xD0	; 208
 43e:	aa 33       	cpi	r26, 0x3A	; 58
 440:	08 f0       	brcs	.+2      	; 0x444 <__utoa_common+0x20>
 442:	a9 5d       	subi	r26, 0xD9	; 217
 444:	a1 93       	st	Z+, r26
 446:	00 97       	sbiw	r24, 0x00	; 0
 448:	79 f7       	brne	.-34     	; 0x428 <__utoa_common+0x4>
 44a:	b1 11       	cpse	r27, r1
 44c:	b1 93       	st	Z+, r27
 44e:	11 92       	st	Z+, r1
 450:	cb 01       	movw	r24, r22
 452:	0c 94 2b 02 	jmp	0x456	; 0x456 <strrev>

00000456 <strrev>:
 456:	dc 01       	movw	r26, r24
 458:	fc 01       	movw	r30, r24
 45a:	67 2f       	mov	r22, r23
 45c:	71 91       	ld	r23, Z+
 45e:	77 23       	and	r23, r23
 460:	e1 f7       	brne	.-8      	; 0x45a <strrev+0x4>
 462:	32 97       	sbiw	r30, 0x02	; 2
 464:	04 c0       	rjmp	.+8      	; 0x46e <strrev+0x18>
 466:	7c 91       	ld	r23, X
 468:	6d 93       	st	X+, r22
 46a:	70 83       	st	Z, r23
 46c:	62 91       	ld	r22, -Z
 46e:	ae 17       	cp	r26, r30
 470:	bf 07       	cpc	r27, r31
 472:	c8 f3       	brcs	.-14     	; 0x466 <strrev+0x10>
 474:	08 95       	ret

00000476 <_exit>:
 476:	f8 94       	cli

00000478 <__stop_program>:
 478:	ff cf       	rjmp	.-2      	; 0x478 <__stop_program>
