
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000036e  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010e  0080010e  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4b  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084b  00000000  00000000  00001373  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f3  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000021b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ad  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000497  00000000  00000000  000027fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 b5 01 	jmp	0x36a	; 0x36a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)

{
    *reg_name = *reg_name |(1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 32 01 	call	0x264	; 0x264 <SEG_init>

    // Test of SSD: display number '3' at position 0
    //SEG_update_shift_regs(0b00001101, 0b00010000);
    SEG_update_shift_regs(3, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 42 01 	call	0x284	; 0x284 <SEG_update_shift_regs>
    
    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms()
  fc:	e1 e8       	ldi	r30, 0x81	; 129
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable()
 10c:	ef e6       	ldi	r30, 0x6F	; 111
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
	
	TIM0_overflow_4ms()
 116:	85 b5       	in	r24, 0x25	; 37
 118:	89 7f       	andi	r24, 0xF9	; 249
 11a:	85 bd       	out	0x25, r24	; 37
 11c:	85 b5       	in	r24, 0x25	; 37
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable()
 122:	ee e6       	ldi	r30, 0x6E	; 110
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
    sei();
 12c:	78 94       	sei
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x3e>

00000130 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
    static uint16_t i=0;
	static uint16_t j=0;
	
	SEG_update_shift_regs(i, 0);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
 158:	0e 94 42 01 	call	0x284	; 0x284 <SEG_update_shift_regs>
	SEG_update_shift_regs(j, 1);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <j.1616>
 162:	0e 94 42 01 	call	0x284	; 0x284 <SEG_update_shift_regs>
	
	if (i==9){
 166:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i.1615>
 16a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <i.1615+0x1>
 16e:	89 30       	cpi	r24, 0x09	; 9
 170:	91 05       	cpc	r25, r1
 172:	b1 f4       	brne	.+44     	; 0x1a0 <__vector_13+0x70>
		i=0;
 174:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <i.1615+0x1>
 178:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <i.1615>
		j++;
 17c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <j.1616>
 180:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <j.1616+0x1>
 184:	01 96       	adiw	r24, 0x01	; 1
		
		if (j==6){
 186:	86 30       	cpi	r24, 0x06	; 6
 188:	91 05       	cpc	r25, r1
 18a:	29 f0       	breq	.+10     	; 0x196 <__vector_13+0x66>
	SEG_update_shift_regs(i, 0);
	SEG_update_shift_regs(j, 1);
	
	if (i==9){
		i=0;
		j++;
 18c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <j.1616+0x1>
 190:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <j.1616>
 194:	0a c0       	rjmp	.+20     	; 0x1aa <__vector_13+0x7a>
		
		if (j==6){
			j=0;
 196:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <j.1616+0x1>
 19a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <j.1616>
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <__vector_13+0x7a>
		}
		
	}
	else{
	i++;	
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <i.1615+0x1>
 1a6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <i.1615>
	} 
	

}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <__vector_16>:
/**********************************************************************
 * Function: Timer/Counter0 overflow interrupt
 * Purpose:  Display tens and units of a counter at SSD.
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	static uint8_t pos = 0;  // This line will only run the first time
	
					
	switch (pos)
 1ee:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	a9 f0       	breq	.+42     	; 0x220 <__vector_16+0x54>
 1f6:	28 f4       	brcc	.+10     	; 0x202 <__vector_16+0x36>
 1f8:	88 23       	and	r24, r24
 1fa:	41 f0       	breq	.+16     	; 0x20c <__vector_16+0x40>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	59 f0       	breq	.+22     	; 0x216 <__vector_16+0x4a>
 200:	1b c0       	rjmp	.+54     	; 0x238 <__vector_16+0x6c>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	91 f0       	breq	.+36     	; 0x22a <__vector_16+0x5e>
 206:	84 30       	cpi	r24, 0x04	; 4
 208:	a9 f0       	breq	.+42     	; 0x234 <__vector_16+0x68>
 20a:	16 c0       	rjmp	.+44     	; 0x238 <__vector_16+0x6c>
	{
		case 0:
			SEG_update_shift_regs(0, pos);
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 42 01 	call	0x284	; 0x284 <SEG_update_shift_regs>
			break;
 214:	11 c0       	rjmp	.+34     	; 0x238 <__vector_16+0x6c>
		case 1:
			SEG_update_shift_regs(0, pos);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 42 01 	call	0x284	; 0x284 <SEG_update_shift_regs>
			break;
 21e:	0c c0       	rjmp	.+24     	; 0x238 <__vector_16+0x6c>
		
		case 2:
			SEG_update_shift_regs(0, pos);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 42 01 	call	0x284	; 0x284 <SEG_update_shift_regs>
			break;
 228:	07 c0       	rjmp	.+14     	; 0x238 <__vector_16+0x6c>
		
		case 3:
			SEG_update_shift_regs(0, pos);
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 42 01 	call	0x284	; 0x284 <SEG_update_shift_regs>
			break;
 232:	02 c0       	rjmp	.+4      	; 0x238 <__vector_16+0x6c>
		case 4:
			pos=0;
 234:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		break;
		
	}
	pos++;
 238:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	8a e2       	ldi	r24, 0x2A	; 42
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 26e:	67 e0       	ldi	r22, 0x07	; 7
 270:	8a e2       	ldi	r24, 0x2A	; 42
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	84 e2       	ldi	r24, 0x24	; 36
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 282:	08 95       	ret

00000284 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{ 
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 28a:	e8 2f       	mov	r30, r24
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ec 5f       	subi	r30, 0xFC	; 252
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 294:	e6 2f       	mov	r30, r22
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	e0 50       	subi	r30, 0x00	; 0
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD,SEG_LATCH);
 29e:	64 e0       	ldi	r22, 0x04	; 4
 2a0:	8b e2       	ldi	r24, 0x2B	; 43
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTD,SEG_CLK);
 2a8:	67 e0       	ldi	r22, 0x07	; 7
 2aa:	8b e2       	ldi	r24, 0x2B	; 43
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTB,SEG_DATA);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	85 e2       	ldi	r24, 0x25	; 37
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	85 e0       	ldi	r24, 0x05	; 5
 2be:	8a 95       	dec	r24
 2c0:	f1 f7       	brne	.-4      	; 0x2be <SEG_update_shift_regs+0x3a>
 2c2:	00 00       	nop
 2c4:	c8 e0       	ldi	r28, 0x08	; 8
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        //PORTB = PORTB & ~(segments<<bit_number);
        if((segments & 1) == 1){
 2c6:	10 ff       	sbrs	r17, 0
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <SEG_update_shift_regs+0x52>
            GPIO_write_high(&PORTB,SEG_DATA);    
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	85 e2       	ldi	r24, 0x25	; 37
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <SEG_update_shift_regs+0x5c>
        }        
        else{
            GPIO_write_low(&PORTB,SEG_DATA);    
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	85 e2       	ldi	r24, 0x25	; 37
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2e0:	85 e0       	ldi	r24, 0x05	; 5
 2e2:	8a 95       	dec	r24
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <SEG_update_shift_regs+0x5e>
 2e6:	00 00       	nop
        }
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD,SEG_CLK);
 2e8:	67 e0       	ldi	r22, 0x07	; 7
 2ea:	8b e2       	ldi	r24, 0x2B	; 43
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2f2:	85 e0       	ldi	r24, 0x05	; 5
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <SEG_update_shift_regs+0x70>
 2f8:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD,SEG_CLK);
 2fa:	67 e0       	ldi	r22, 0x07	; 7
 2fc:	8b e2       	ldi	r24, 0x2B	; 43
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 304:	16 95       	lsr	r17
 306:	c1 50       	subi	r28, 0x01	; 1
    // Wait 1 us
    _delay_us(1);
    
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 308:	f1 f6       	brne	.-68     	; 0x2c6 <SEG_update_shift_regs+0x42>
 30a:	c8 e0       	ldi	r28, 0x08	; 8
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        //PORTB = PORTB & ~(position<<bit_number);
        if ((position & 1) == 1){
 30c:	d0 ff       	sbrs	r29, 0
 30e:	06 c0       	rjmp	.+12     	; 0x31c <SEG_update_shift_regs+0x98>
            GPIO_write_high(&PORTB,SEG_DATA);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	85 e2       	ldi	r24, 0x25	; 37
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 31a:	05 c0       	rjmp	.+10     	; 0x326 <SEG_update_shift_regs+0xa2>
        }
        else{
            GPIO_write_low(&PORTB,SEG_DATA);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	85 e2       	ldi	r24, 0x25	; 37
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	8a 95       	dec	r24
 32a:	f1 f7       	brne	.-4      	; 0x328 <SEG_update_shift_regs+0xa4>
 32c:	00 00       	nop
        }
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD,SEG_CLK);
 32e:	67 e0       	ldi	r22, 0x07	; 7
 330:	8b e2       	ldi	r24, 0x2B	; 43
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	8a 95       	dec	r24
 33c:	f1 f7       	brne	.-4      	; 0x33a <SEG_update_shift_regs+0xb6>
 33e:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD,SEG_CLK);
 340:	67 e0       	ldi	r22, 0x07	; 7
 342:	8b e2       	ldi	r24, 0x2B	; 43
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 34a:	d6 95       	lsr	r29
 34c:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 34e:	f1 f6       	brne	.-68     	; 0x30c <SEG_update_shift_regs+0x88>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD,SEG_LATCH);
 350:	64 e0       	ldi	r22, 0x04	; 4
 352:	8b e2       	ldi	r24, 0x2B	; 43
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 35a:	85 e0       	ldi	r24, 0x05	; 5
 35c:	8a 95       	dec	r24
 35e:	f1 f7       	brne	.-4      	; 0x35c <SEG_update_shift_regs+0xd8>
 360:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
    
    
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	08 95       	ret

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
